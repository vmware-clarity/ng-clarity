import { ElementRef, EventEmitter, OnDestroy, OnInit } from '@angular/core';
import { ClrCommonStringsService } from '../utils';
import { ClrModalConfigurationService } from './modal-configuration.service';
import * as i0 from "@angular/core";
export declare class ClrSidePanel implements OnInit, OnDestroy {
    private element;
    private configuration;
    commonStrings: ClrCommonStringsService;
    openChange: EventEmitter<boolean>;
    closeButtonAriaLabel: string | undefined;
    skipAnimation: boolean;
    labelledById: string;
    staticBackdrop: boolean;
    closable: boolean;
    preventClose: boolean;
    altClose: EventEmitter<boolean>;
    private _pinnable;
    private _pinned;
    private originalStopClose;
    private _position;
    private _modal;
    private __open;
    private _size;
    constructor(element: ElementRef<HTMLElement>, configuration: ClrModalConfigurationService, commonStrings: ClrCommonStringsService);
    get _open(): boolean;
    set _open(open: boolean);
    get size(): string;
    set size(value: string);
    get position(): string;
    set position(position: string);
    get pinned(): boolean;
    set pinned(pinned: boolean);
    get clrSidePanelBackdrop(): boolean;
    set clrSidePanelBackdrop(backdrop: boolean);
    get clrSidePanelPinnable(): boolean;
    set clrSidePanelPinnable(pinnable: boolean);
    private get modal();
    private set modal(value);
    private get hostElement();
    private get bottomPositionCssClass();
    ngOnInit(): void;
    ngOnDestroy(): void;
    handleModalOpen(open: boolean): void;
    open(): void;
    close(): void;
    togglePinned(): void;
    private documentClick;
    private updateModalState;
    private cleanupPinnedClasses;
    private updatePinnedClasses;
    static ɵfac: i0.ɵɵFactoryDeclaration<ClrSidePanel, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<ClrSidePanel, "clr-side-panel", never, { "closeButtonAriaLabel": "clrSidePanelCloseButtonAriaLabel"; "skipAnimation": "clrSidePanelSkipAnimation"; "labelledById": "clrSidePanelLabelledById"; "staticBackdrop": "clrSidePanelStaticBackdrop"; "closable": "clrSidePanelClosable"; "preventClose": "clrSidePanelPreventClose"; "_open": "clrSidePanelOpen"; "size": "clrSidePanelSize"; "position": "clrSidePanelPosition"; "pinned": "clrSidePanelPinned"; "clrSidePanelBackdrop": "clrSidePanelBackdrop"; "clrSidePanelPinnable": "clrSidePanelPinnable"; }, { "openChange": "clrSidePanelOpenChange"; "altClose": "clrSidePanelAlternateClose"; }, never, [".side-panel-title", ".side-panel-body", ".side-panel-footer"], false, never>;
}
