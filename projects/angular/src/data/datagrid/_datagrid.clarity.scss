/*
 * Copyright (c) 2016-2024 Broadcom. All Rights Reserved.
 * The term "Broadcom" refers to Broadcom Inc. and/or its subsidiaries.   
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
@use 'sass:map';
@use 'sass:meta';
@use '../tables.clarity';
@use '../../image/icons.clarity';
@use '../../utils/mixins';
@use '../../utils/variables/variables';
@use '../../button/variables.buttons' as button-variables;
@use '../../forms/styles/variables.forms' as forms-variables;
@use '../../modal/variables.modal' as modal-variables;
@use '../../popover/dropdown/variables.dropdown' as dropdown-variables;
@use '../variables.tables' as tables-variables;
@use 'variables.datagrid' as datagrid-variables;
@use '@cds/core/tokens/tokens.scss';

@mixin clr-datagrid-header-bg {
  background-color: tables-variables.$clr-thead-bgcolor;
}

@mixin clr-datagrid-popover-shadows {
  box-shadow: datagrid-variables.$clr-datagrid-popovers-box-shadow;
}

@mixin datagrid-action-overflow-appearance {
  position: absolute;
  background: datagrid-variables.$clr-datagrid-popover-bg-color;
  padding: tokens.$cds-global-space-5;
  margin-left: tokens.$cds-global-space-4;
  border-style: solid;
  border-width: tokens.$cds-alias-object-border-width-100;
  border-color: datagrid-variables.$clr-datagrid-popover-border-color;
  @include clr-datagrid-popover-shadows;
  border-radius: tokens.$cds-alias-object-border-radius-100;
  font-weight: normal;
  white-space: nowrap;

  &::before {
    content: '';
    position: absolute;
    top: 50%;
    right: 100%;
    @include mixins.equilateral(0);
    margin-top: calc(-1 * datagrid-variables.$clr-datagrid-action-arrow-size);
    border-top: datagrid-variables.$clr-datagrid-action-arrow-size solid transparent;
    border-bottom: datagrid-variables.$clr-datagrid-action-arrow-size solid transparent;
    border-right-width: datagrid-variables.$clr-datagrid-action-arrow-size;
    border-right-style: solid;
    border-right-color: datagrid-variables.$clr-datagrid-popover-border-color;
  }

  &::after {
    content: '';
    position: absolute;
    top: 50%;
    right: 100%;
    @include mixins.equilateral(0);
    margin-top: calc(-1 * datagrid-variables.$clr-datagrid-action-arrow-size + tokens.$cds-global-space-1);
    border-top: calc(datagrid-variables.$clr-datagrid-action-arrow-size - tokens.$cds-global-space-1) solid transparent;
    border-bottom: calc(datagrid-variables.$clr-datagrid-action-arrow-size - tokens.$cds-global-space-1) solid
      transparent;
    border-right-width: calc(datagrid-variables.$clr-datagrid-action-arrow-size - tokens.$cds-global-space-1);
    border-right-style: solid;
    border-right-color: datagrid-variables.$clr-datagrid-popover-bg-color;
  }

  .action-item {
    color: datagrid-variables.$clr-datagrid-popover-font-color;
    @include mixins.generate-typography-token('SECONDARY-13-RG-EXP');

    background: transparent;
    border: 0;
    cursor: pointer;
    display: block;
    margin: 0;
    padding: 0 tokens.$cds-global-space-9 0 tokens.$cds-global-space-7;
    text-align: left;
    width: 100%;

    &:hover,
    &:focus {
      text-decoration: none;
      background-color: datagrid-variables.$clr-datagrid-action-popover-hover-color;
    }

    &.active {
      background-color: datagrid-variables.$clr-datagrid-row-hover-color;
      color: datagrid-variables.$clr-datagrid-row-hover-font-color;
    }

    &:focus {
      outline: 0;
    }

    &.disabled,
    &:disabled {
      cursor: not-allowed;
      opacity: 0.4;
      user-select: none;

      &:hover {
        background: none;
      }

      &:active,
      &:focus {
        background: none;
        box-shadow: none;
      }
    }

    cds-icon,
    clr-icon {
      vertical-align: middle;
      transform: translate3d(0px, calc(-1 * tokens.$cds-global-space-1), 0);
    }
  }
}

@include meta.load-css('properties.datagrid');

@include mixins.exports('datagrid.clarity') {
  @include tables.basic-table(
    '.datagrid',
    '.datagrid-header',
    '.datagrid-body',
    '.datagrid-row',
    '.datagrid-column',
    '.datagrid-cell'
  );

  .datagrid-host {
    display: flex;
    flex-flow: column nowrap;
    position: relative;
  }

  .datagrid {
    // Overrides the table defaults so the new structure has correct corners
    border-bottom-left-radius: 0;
    border-bottom-right-radius: 0;
    -ms-overflow-style: -ms-autohiding-scrollbar;
    overflow: auto;
    flex: 1 1 auto;
    margin-top: tokens.$cds-global-space-6;
  }

  .datagrid-container {
    width: auto;
    @include mixins.generate-typography-token(
      'BODY-14-RG-STD',
      (
        font-size: tables-variables.$clr-table-fontsize,
      )
    );
    padding: tables-variables.$clr-table-topcellpadding tables-variables.$clr-table-cellpadding
      tables-variables.$clr-table-bottomcellpadding;
  }

  .datagrid-expandable-caret {
    padding: tokens.$cds-global-space-2 datagrid-variables.$clr-datagrid-horizontal-padding tokens.$cds-global-space-3;
    text-align: center;

    .datagrid-expandable-caret-button {
      @include mixins.clr-no-styles-button();
      cursor: pointer;
      @include mixins.equilateral(tokens.$cds-global-space-10);
    }

    .datagrid-expandable-caret-icon {
      color: datagrid-variables.$clr-datagrid-icon-color;

      svg {
        transition: transform 0.2s ease-in-out;
      }
    }

    .spinner {
      margin-top: tokens.$cds-global-space-4;
    }

    &.datagrid-column {
      padding: tables-variables.$clr-table-topcellpadding tables-variables.$clr-table-cellpadding
        tables-variables.$clr-table-bottomcellpadding;
    }
  }

  .datagrid-header,
  .datagrid-body,
  .datagrid-row,
  .datagrid-column,
  .datagrid-cell,
  .datagrid-fixed-column {
    display: block;
  }

  .datagrid-row {
    border-top-style: solid;
    border-top-width: tables-variables.$clr-table-borderwidth;
    border-top-color: tables-variables.$clr-table-border-color;

    &:first-of-type {
      border-top: none;
    }

    &:hover,
    &:hover .datagrid-row-sticky {
      background-color: datagrid-variables.$clr-datagrid-row-hover-color;
    }

    &.datagrid-selected,
    &.datagrid-selected .datagrid-row-sticky {
      color: datagrid-variables.$clr-datagrid-row-selected;
      background-color: datagrid-variables.$clr-datagrid-row-selected-background-color;
    }

    &.datagrid-selected {
      &:hover,
      &:hover .datagrid-row-sticky {
        background-color: datagrid-variables.$clr-datagrid-row-selected-hover-background-color;
      }
      &:active,
      &:active .datagrid-row-sticky {
        background-color: datagrid-variables.$clr-datagrid-row-selected-active-background-color;
      }
    }

    &:active,
    &:active .datagrid-row-sticky {
      background-color: datagrid-variables.$clr-datagrid-row-active-color;
    }

    .datagrid-row-detail-wrapper {
      flex: 1 1 auto;
      display: flex;
    }

    .datagrid-row-detail {
      width: auto;

      .datagrid-cell {
        padding-top: 0;
        border: none;
      }
    }

    .datagrid-select {
      min-width: calc(
        tokens.$cds-global-space-5 - tables-variables.$clr-table-borderwidth
      ); // This fixed an issue that made the cell too wide.
      align-items: center;
      padding: tokens.$cds-global-space-3 tokens.$cds-global-space-7;

      &,
      input {
        cursor: pointer;
      }

      &.clr-form-control-disabled {
        &,
        input {
          cursor: not-allowed;
        }
      }
    }

    .datagrid-signpost-trigger .signpost {
      margin: calc(-1 * tokens.$cds-global-space-5) 0;
      height: tokens.$cds-global-space-9;

      .signpost-trigger {
        height: inherit;
        line-height: tokens.$cds-global-space-9;
      }
    }
  }

  .datagrid-row-sticky {
    background-color: tables-variables.$clr-table-bgcolor;
    display: flex;
    flex-wrap: nowrap;
    position: sticky;
    left: 0;
    z-index: map.get(variables.$clr-layers, datagrid-row-sticky);

    .datagrid-cell:last-child {
      &:after {
        content: '';
        width: datagrid-variables.$clr-datagrid-column-separator-width;
        height: datagrid-variables.$clr-datagrid-column-separator-height;
        position: absolute;
        right: 0;
        top: tokens.$cds-global-space-3;
        background-color: tables-variables.$clr-table-border-color;
      }
    }
  }

  .datagrid-row-scrollable {
    flex: 1 1 auto;
    display: flex;
    flex-flow: column nowrap;

    &.is-replaced {
      flex-direction: row;

      .datagrid-scrolling-cells {
        flex: 0 0 auto;
      }
    }

    .datagrid-column:last-child {
      .datagrid-column-separator {
        display: none;
      }
    }
  }

  .datagrid-row-flex {
    flex: 1 1 auto;
    display: flex;
    flex-flow: row nowrap;

    .datagrid-row-detail {
      display: flex;
      flex-flow: row nowrap;

      .datagrid-cell {
        padding-top: 0;
      }
    }
  }

  .datagrid-scrolling-cells,
  .datagrid-scrolling-details {
    display: flex;
    flex: 1 1 auto;
    flex-flow: row nowrap;
  }

  .datagrid-action-bar {
    margin-top: tokens.$cds-global-space-9;

    // This changes the height and position of the datagrid-spinner when there is an action-bar
    // Allows us to cover the action-bar with the spinner backgdrop and prevent user interactions.
    & ~ .datagrid-spinner {
      height: calc(100% - #{tokens.$cds-global-space-9});
      top: tokens.$cds-global-space-9; // Account for the margin above the datagrid-action-bar
    }
  }

  .datagrid-header {
    position: sticky;
    top: 0;
    // bug(popover): prevents action-overflow from being on top (first row).
    // Needed to keep select/radio and expand svgs underneath header on scrolling
    z-index: map.get(variables.$clr-layers, datagrid-header);
    width: auto;

    .datagrid-column {
      border-bottom: none;
    }

    .datagrid-row {
      @include clr-datagrid-header-bg;

      border-top: none;
      border-bottom-style: solid;
      border-bottom-width: tokens.$cds-alias-object-border-width-100;
      border-bottom-color: tables-variables.$clr-table-border-color;

      .datagrid-row-sticky {
        @include clr-datagrid-header-bg;
        z-index: map.get(variables.$clr-layers, datagrid-header-sticky);
      }

      &:hover {
        @include clr-datagrid-header-bg;

        .datagrid-row-sticky {
          @include clr-datagrid-header-bg;
        }
      }
    }

    .datagrid-row-scrollable {
      flex-direction: row;
    }
  }

  .datagrid-table-wrapper {
    display: flex;
    flex: 1 1 auto;
    min-height: 100%;
  }

  .datagrid-table {
    display: flex;
    flex-direction: column;
    flex: 1 1 auto;
    align-content: flex-start;

    .datagrid-loading-more-items-row .datagrid-loading-more-items-cell {
      display: flex;
      padding: tokens.$cds-global-space-9;
      align-items: center;
      gap: tokens.$cds-global-space-6;
      justify-content: center;
    }

    .datagrid-body {
      width: auto;
    }

    .datagrid-column {
      position: relative;
      text-align: left;
      min-width: tokens.$cds-global-space-15;
      display: flex;
      flex: 1 1 auto;
      vertical-align: top;
      border: none;

      &:focus {
        outline: -webkit-focus-ring-color solid tokens.$cds-global-space-2;
        outline-offset: calc(-1 * tokens.$cds-global-space-2);
      }

      clr-dg-filter,
      clr-dg-string-filter,
      clr-dg-numeric-filter {
        display: flex;
        order: 99;
        margin-left: auto;
        align-items: center;
      }

      .datagrid-filter-input-spacer {
        width: tokens.$cds-global-space-6;
        display: inline-block;
      }

      .datagrid-numeric-filter-input {
        width: tokens.$cds-global-space-14;
      }

      .datagrid-filter-toggle {
        @include mixins.clr-no-styles-button();
        cursor: pointer;
        float: right;
        vertical-align: middle;
        @include mixins.min-equilateral(datagrid-variables.$clr-datagrid-filter-toggle-size);
        margin-left: tokens.$cds-global-space-4;
        background-repeat: no-repeat;
        background-size: contain;

        cds-icon,
        clr-icon {
          color: tokens.$cds-alias-object-interaction-color;
        }

        &:hover {
          cds-icon,
          clr-icon {
            color: tokens.$cds-alias-object-interaction-color-hover;
          }
        }

        &.datagrid-filter-open {
          cds-icon,
          clr-icon {
            color: tokens.$cds-alias-object-interaction-color-active;
          }
        }

        &.datagrid-filtered {
          cds-icon,
          clr-icon {
            color: tokens.$cds-alias-object-interaction-color-selected;
          }
        }
      }

      &.datagrid-fixed-width {
        flex: 0 0 auto;
      }

      .datagrid-column-flex {
        display: flex;
        flex: 1 1 auto;
      }

      .datagrid-column-title {
        @include mixins.clr-no-styles-button();
        color: tables-variables.$clr-table-font-color;
        text-align: left;
        flex: 1 1 auto;
        align-items: center;
        align-self: center;
        display: flex;

        .signpost .signpost-action.btn {
          height: inherit;
          line-height: inherit;
        }

        // Override checkbox labels only when they are in a column. This allows them to be vertically centered.
        .clr-checkbox-wrapper .clr-control-label {
          margin-top: calc(-1 * mixins.baselinePx(10));
        }
      }

      button.datagrid-column-title {
        &:hover {
          text-decoration: underline;
          cursor: pointer;
        }

        .sort-icon {
          color: tokens.$cds-alias-object-interaction-color;
          margin-left: auto; // pushes icon to rhs b/c of parents display: flex
          @include mixins.equilateral(datagrid-variables.$clr-datagrid-icon-size);
          vertical-align: middle;

          &:hover {
            color: tokens.$cds-alias-object-interaction-color-hover;
          }
          &:active {
            color: tokens.$cds-alias-object-interaction-color-active;
          }
        }
      }

      .datagrid-column-separator {
        display: flex;
        align-items: center;
        flex: 0 0 auto;
        width: tokens.$cds-alias-object-border-width-100;
        order: 100;
        margin-left: auto;
        height: 100%;

        &::after {
          content: '';
          position: absolute;
          height: datagrid-variables.$clr-datagrid-column-separator-height;
          width: datagrid-variables.$clr-datagrid-column-separator-width;
          right: 0;
          background-color: tables-variables.$clr-table-border-color;
        }

        .datagrid-column-handle {
          @include mixins.clr-no-styles-button();
          position: absolute;
          width: calc(tokens.$cds-global-space-6 + tokens.$cds-global-space-1);
          right: calc(-1 * tokens.$cds-global-space-4);
          top: calc(-1 * tokens.$cds-global-space-4);
          cursor: col-resize;
          height: calc(100% + #{tokens.$cds-global-space-6} - #{tokens.$cds-alias-object-border-width-100});
          z-index: map.get(variables.$clr-layers, datagrid-header);
        }

        .datagrid-column-resize-tracker {
          position: absolute;
          top: calc(-1 * tokens.$cds-global-space-6);
          display: none;
          width: tokens.$cds-global-space-1;
          height: 0;
          border-right-style: dotted;
          border-right-color: tokens.$cds-global-color-blue-300;
          border-right-width: tokens.$cds-alias-object-border-width-100;
          transform: translateX(0px);
          cursor: col-resize;

          &.on-arrow-key-resize {
            transition: transform 0.2s ease-out;
          }
        }

        .exceeded-max {
          // TODO: CSS property here?
          border-right: tokens.$cds-alias-object-border-width-100 dotted tokens.$cds-alias-status-danger-dark;
        }
      }

      .datagrid-signpost-trigger .signpost {
        margin: calc(-1 * tokens.$cds-global-space-5) 0;
        height: tokens.$cds-global-space-9;

        .signpost-trigger {
          height: inherit;
          line-height: tokens.$cds-global-space-9;
        }
      }

      &.datagrid-select,
      &.datagrid-expandable-caret,
      &.datagrid-row-actions {
        max-width: datagrid-variables.$clr-datagrid-fixed-column-size;
        min-width: datagrid-variables.$clr-datagrid-fixed-column-size;
      }
    }

    .datagrid-cell {
      flex: 1 1 auto;
      text-align: left;
      min-width: tokens.$cds-global-space-15;
      border: none;

      // TODO can width/column classes be combined? width is added programetically as part of rendering, column is
      //  class in template
      &.datagrid-fixed-width {
        flex: 0 0 auto;
      }

      &.datagrid-fixed-column {
        flex: 0 0 datagrid-variables.$clr-datagrid-fixed-column-size;
        max-width: datagrid-variables.$clr-datagrid-fixed-column-size;
        min-width: datagrid-variables.$clr-datagrid-fixed-column-size;
      }

      &.datagrid-row-actions {
        background: none;
      }

      &.datagrid-expandable-caret {
        padding: tokens.$cds-global-space-2 datagrid-variables.$clr-datagrid-horizontal-padding
          tokens.$cds-global-space-3;
        text-align: center;
      }

      &:focus {
        outline: -webkit-focus-ring-color solid tokens.$cds-global-space-2;
        outline-offset: calc(-1 * tokens.$cds-global-space-2);
      }

      .datagrid-action-toggle {
        @include mixins.clr-no-styles-button();

        cds-icon,
        clr-icon {
          color: datagrid-variables.$clr-datagrid-icon-color;
        }

        &:active {
          cds-icon,
          clr-icon {
            // Fixed active state on this button for Safari.
            color: datagrid-variables.$clr-datagrid-action-toggle-color;
          }
        }
      }

      // align toggle input to row hight
      .clr-toggle-wrapper {
        margin-top: calc(-1 * tokens.$cds-global-space-6);
        padding-top: tokens.$cds-global-space-5;
      }
    }

    .datagrid-placeholder-container {
      flex: 1 1 auto;
      display: flex;
      justify-content: center;
      border-top-style: solid;
      border-top-color: tables-variables.$clr-table-border-color;
      border-top-width: tokens.$cds-alias-object-border-width-100;
    }

    .datagrid-placeholder {
      background: datagrid-variables.$clr-datagrid-placeholder-background-color;
      display: none;
      width: 100%;

      &.datagrid-empty {
        border-top: 0;
        display: flex;
        flex-flow: column nowrap;
        align-items: center;
        justify-content: flex-start;
        gap: tokens.$cds-global-space-9;
        padding: tokens.$cds-global-space-9;
        @include mixins.generate-typography-token(
          'SECTION-20-STD',
          (
            font-size: datagrid-variables.$clr-datagrid-placeholder-font-size,
            font-weight: datagrid-variables.$clr-datagrid-placeholder-font-weight,
            line-height: datagrid-variables.$clr-datagrid-placeholder-line-height,
            letter-spacing: datagrid-variables.$clr-datagrid-placeholder-letter-spacing,
          )
        );
        color: datagrid-variables.$clr-datagrid-placeholder-color;
      }

      .datagrid-placeholder-image {
        @include mixins.equilateral(tokens.$cds-global-space-13);
        background-repeat: no-repeat;
        background-size: contain;
        background-position: center;
        background-image: icons.generateEmptyDatagridPlaceholder();
      }
    }

    .datagrid-hidden-column {
      &.datagrid-column,
      &.datagrid-cell {
        display: none;
      }
    }
    .datagrid-row-scrollable {
      .datagrid-column {
        .datagrid-column-separator {
          &::after {
            background-color: datagrid-variables.$clr-datagrid-column-resize-handler-color;
          }
        }
      }
    }
  }

  .datagrid-row-replaced {
    .datagrid-scrolling-cells {
      .datagrid-cell {
        // Keep row action cells so they can be used.
        &:not(.datagrid-expandable-caret):not(.datagrid-row-actions):not(.datagrid-select) {
          display: none;
        }
      }
    }

    .datagrid-row-detail {
      .datagrid-cell {
        display: block;
        padding-top: tokens.$cds-global-space-6;

        &.datagrid-hidden-column {
          display: none;
        }
      }

      .datagrid-expandable-caret {
        padding-top: tokens.$cds-global-space-2;
      }

      &.datagrid-container {
        border-top: tokens.$cds-alias-object-border-width-100 solid tables-variables.$clr-table-border-color;

        .datagrid-cell {
          border-top: none;
        }
      }
    }
  }

  .datagrid-footer {
    flex: 0 0 auto;
    display: flex;
    flex-flow: row nowrap;
    justify-content: space-between;
    align-items: stretch;
    padding: tokens.$cds-global-space-5 tokens.$cds-global-space-7;
    // Account for borders
    @include mixins.generate-typography-token('CAPTION-LG-11');
    background-color: tables-variables.$clr-thead-bgcolor;
    border-style: solid;
    border-color: tables-variables.$clr-table-footer-border-top-color;
    border-width: tokens.$cds-alias-object-border-width-100;
    border-top: none;
    border-radius: 0;
    border-bottom-right-radius: tokens.$cds-alias-object-border-radius-100;
    border-bottom-left-radius: tokens.$cds-alias-object-border-radius-100;

    .pagination {
      display: flex;
      align-items: center;
      flex-wrap: wrap;
      justify-content: flex-end;
      gap: datagrid-variables.$clr-datagrid-footer-pagination-gap;

      &-size {
        display: block;
        flex: 1 1 auto;
        white-space: nowrap;
        text-align: right;

        .clr-page-size-select {
          @include mixins.generate-typography-token('CAPTION-SM-10');
          margin-left: tokens.$cds-global-space-6;
          height: tokens.$cds-global-space-9;
          vertical-align: middle;
        }
      }

      &-description {
        white-space: nowrap;
      }

      &-list {
        display: flex;
        align-items: center;
      }
    }

    .column-switch-wrapper {
      position: relative;
      flex: 0 0 auto;
      display: flex;
      align-items: center;

      .column-toggle--action {
        // I'm overriding .btn/.btn-link here but am not confident this is the correct way to do it.
        min-width: tokens.$cds-global-space-8;
        text-transform: capitalize;
        padding: datagrid-variables.$clr-datagrid-column-toggle-padding;
        border-color: datagrid-variables.$clr-datagrid-column-toggle-border-color;
        background-color: datagrid-variables.$clr-datagrid-column-toggle-fill-color;
        color: datagrid-variables.$clr-datagrid-column-toggle-text-color;
        margin: 0;

        &.disabled,
        &:disabled,
        &.disabled:hover,
        &:disabled:hover,
        &.disabled:active,
        &:disabled:active {
          cursor: not-allowed;
          border-color: datagrid-variables.$clr-datagrid-column-toggle-disabled-color;
          color: datagrid-variables.$clr-datagrid-column-toggle-disabled-color;
          background-color: datagrid-variables.$clr-datagrid-column-toggle-fill-color;
        }

        &:hover {
          border-color: datagrid-variables.$clr-datagrid-column-toggle-border-hover-color;
          background-color: datagrid-variables.$clr-datagrid-column-toggle-fill-hover-color;
          color: datagrid-variables.$clr-datagrid-column-toggle-text-hover-color;
        }
        &:active,
        &:focus {
          box-shadow: none;
          border-color: datagrid-variables.$clr-datagrid-column-toggle-border-active-color;
          background-color: datagrid-variables.$clr-datagrid-column-toggle-fill-active-color;
          color: datagrid-variables.$clr-datagrid-column-toggle-text-active-color;
        }
      }
    }

    .clr-form-control-disabled {
      display: flex;
      align-items: center;
      height: 100%;
    }
  }

  .clr-form-control-disabled .datagrid-footer-select.clr-checkbox-wrapper input[type='checkbox']:checked + label {
    cursor: default;

    margin-right: tokens.$cds-global-space-5;

    &::before {
      background-color: forms-variables.$clr-forms-label-disabled-color;
    }
  }

  .datagrid-spinner {
    position: absolute;
    display: flex;
    justify-content: center;
    align-items: center;
    width: 100%;
    top: tokens.$cds-global-space-6;
    height: calc(100% - #{tokens.$cds-global-space-6}); // Account for the margin above the datagrid-action-bar
    background-color: datagrid-variables.$clr-datagrid-loading-background;
    z-index: map.get(variables.$clr-layers, datagrid-host); // Keeps the spinner above the datagrid header.
  }

  .datagrid-compact {
    .datagrid-header {
      min-height: tokens.$cds-global-space-9;
    }

    .datagrid-column .datagrid-column-separator {
      &::after {
        height: calc(100% - (0.5 * #{datagrid-variables.$clr-datagrid-column-separator-expandby}));
      }
    }

    .datagrid-row {
      .datagrid-select {
        padding: 0 tokens.$cds-global-space-7;
      }
    }

    .datagrid-cell {
      clr-icon {
        margin-top: calc((-1 * tokens.$cds-global-space-3) - tokens.$cds-global-space-1);
        margin-bottom: calc(-1 * tokens.$cds-global-space-3);
        transform: translateY(calc(-1 * tokens.$cds-global-space-1));
      }

      cds-icon {
        margin-top: calc((-1 * tokens.$cds-global-space-3) - tokens.$cds-global-space-1);
        margin-bottom: calc(-1 * tokens.$cds-global-space-3);
      }

      .badge {
        margin-top: calc(-1 * tokens.$cds-global-space-3);
        margin-bottom: calc(-1 * tokens.$cds-global-space-1);
      }
    }

    .datagrid-expandable-caret {
      text-align: center;

      .spinner {
        margin-top: tokens.$cds-global-space-3;
      }

      .datagrid-expandable-caret-button {
        @include mixins.clr-no-styles-button();
        @include mixins.equilateral(tokens.$cds-global-space-9);
        outline-offset: datagrid-variables.$clr-datagrid-compact-outline-offset;
      }

      .datagrid-expandable-caret-icon {
        margin: 0;
      }

      &.datagrid-cell {
        padding: 0;
      }

      &.datagrid-column {
        padding-top: calc(tables-variables.$clr-table-compact-vertical-padding + tokens.$cds-global-space-1);
        padding-bottom: tables-variables.$clr-table-compact-vertical-padding;
      }
    }

    .datagrid-signpost-trigger .signpost .signpost-trigger {
      cds-icon:not([shape='info-circle'], [shape='exclamation-triangle'], [shape='exclamation-circle'], [shape='check-circle'], [shape='info'], [shape='error']),
      clr-icon:not([shape='info-circle'], [shape='exclamation-triangle'], [shape='exclamation-circle'], [shape='check-circle'], [shape='info'], [shape='error']) {
        @include mixins.equilateral(tokens.$cds-global-space-9);
      }
    }

    .datagrid-footer {
      padding: 0 tokens.$cds-global-space-7;
      line-height: tokens.$cds-global-space-9 - tokens.$cds-global-space-1;

      .pagination {
        line-height: tokens.$cds-global-space-9;
      }

      .column-switch-wrapper .column-toggle--action {
        outline-offset: datagrid-variables.$clr-datagrid-compact-outline-offset;
      }

      .clr-form-control-disabled .datagrid-footer-select.clr-checkbox-wrapper input[type='checkbox']:checked + label {
        top: 0;
      }
    }
  }

  .datagrid-footer-description {
    flex: 1 1 auto;
    flex-wrap: nowrap;
    white-space: nowrap;
    display: block;
    text-align: right;
    margin: auto 0;
  }

  // Yes, this is not .datagrid-pagination on purpose.
  // I've been told to consider a potential separate pagination component.
  .pagination-list {
    list-style: none;
    display: flex;
    flex-flow: row nowrap;
    justify-content: center;
    align-items: stretch;

    .pagination-current {
      @include mixins.generate-typography-token('CAPTION-SM-10');
      background: none;
      background-color: forms-variables.$clr-forms-textarea-background-color;
      border-color: datagrid-variables.$clr-datagrid-pagination-input-border-color;
      border-width: tokens.$cds-alias-object-border-width-100;
      border-style: solid;
      border-radius: tokens.$cds-alias-object-border-radius-100;
      min-width: tokens.$cds-global-space-9;
      text-align: center;
      transition: none !important;

      &:focus,
      &.clr-focus {
        background: none;
        border: tokens.$cds-alias-object-border-width-100 solid
          datagrid-variables.$clr-datagrid-pagination-input-border-focus-color;
      }
    }

    > * {
      padding: 0 tokens.$cds-global-space-2;
    }

    $clr-pagination-extra-margin: tokens.$cds-global-space-6;

    .pagination-first,
    .pagination-last,
    .pagination-previous,
    .pagination-next {
      display: flex;
      align-items: center;
      background-repeat: no-repeat;
      background-size: contain;
    }

    .pagination-first:disabled,
    .pagination-last:disabled,
    .pagination-previous:disabled,
    .pagination-next:disabled {
      color: tokens.$cds-alias-status-disabled;
      cursor: not-allowed;
      opacity: datagrid-variables.$clr-datagrid-pagination-btn-disabled-opacity;
    }

    .pagination-first,
    .pagination-previous {
      margin-right: tokens.$cds-global-space-6;
    }

    .pagination-last,
    .pagination-next {
      margin-left: tokens.$cds-global-space-6;
    }

    button {
      @include mixins.clr-no-styles-button();
      color: datagrid-variables.$clr-datagrid-pagination-btn-color;
      // FIXME: this should be in the general reboot
      cursor: pointer;
    }
  }

  /*
        The following classes are used by the renderer when performing internal operations.
        Using the browser calculations improves rendering performance.
    */
  // This class is used by the dom-renderer.ts when testing cell for a user defined width.
  .datagrid-cell-width-zero {
    // Much zero. Such !important. Wow.
    border: 0 !important;
    padding: 0 !important;
    width: 0;
    flex: 0 0 auto !important;
    min-width: 0 !important;
    display: block !important;
    visibility: hidden !important;
    position: absolute !important;
    top: 0;
    left: 0;
  }

  /**
   * Detail pane
   */
  .datagrid-outer-wrapper {
    display: flex;
    flex-direction: row;
    flex-grow: 1;
    overflow: auto;
  }

  .datagrid-inner-wrapper {
    display: flex;
    flex-direction: column;
    flex-grow: 1;
    overflow: auto;
    min-width: mixins.baselinePx(240);
  }

  .datagrid-detail-open {
    & > .datagrid-outer-wrapper > .datagrid-inner-wrapper {
      div.datagrid-table {
        /**
         * So the content with no spaces in the cell doesn't get cut when and the row selected indicator is not hidden
         * e.g. Helloworldthisisaveryveryveryveryverylongcontent
         */
        max-width: 100%;
        /**
         * To get rid of detail-pane overlapping the content inside the rows
         */
        overflow: hidden;
      }

      & > .cdk-virtual-scrollable div.datagrid-table {
        overflow: unset;
      }

      clr-dg-cell {
        /**
         * Since we use inline width of each column in order to maintain manual resizing,
         * we need to use !important to override the inline width.
         */
        width: 100% !important;
      }

      /**
       * Needed to prevent hidding the sorting and filtering icons
       */
      clr-dg-column:first-child {
        /**
          * Since we use inline width of each column in order to maintain manual resizing,
          * we need to use !important to override the inline width.
          */
        width: auto !important;
      }
    }

    .datagrid {
      border-top-right-radius: 0;
      border-right: none;
    }

    .datagrid-inner-wrapper {
      width: 34%;
    }

    .datagrid-placeholder-container,
    .datagrid-row {
      border-right: tokens.$cds-alias-object-border-width-100 solid tables-variables.$clr-table-border-color;
    }

    .datagrid-footer {
      border-bottom-right-radius: 0;
    }

    .pagination {
      width: 100%;
    }

    .pagination-description-compact {
      text-align: left;
      flex: 1;
    }

    .datagrid-footer .pagination-list {
      margin-right: 0;
    }
  }

  .datagrid-row-detail-open {
    position: relative;

    &:before {
      content: '';
      display: inline-block;
      position: absolute;
      border: tokens.$cds-global-space-5 solid transparent;
      border-right-color: tables-variables.$clr-table-border-color;
      top: mixins.baselinePx(10);
      right: 0;
    }

    &:after {
      content: '';
      display: inline-block;
      position: absolute;
      border: tokens.$cds-global-space-5 solid transparent;
      border-right-color: datagrid-variables.$clr-datagrid-popover-bg-color;
      top: mixins.baselinePx(11);
      right: calc(-1 * tokens.$cds-global-space-1);
    }
  }

  .datagrid-detail-pane {
    margin-top: tokens.$cds-global-space-6;
    border-width: tokens.$cds-alias-object-border-width-100;
    border-style: solid;
    border-color: datagrid-variables.$clr-datagrid-detail-pane-border-color;
    border-left: none;
    border-top-right-radius: tokens.$cds-alias-object-border-radius-100;
    border-bottom-right-radius: tokens.$cds-alias-object-border-radius-100;
    background: datagrid-variables.$clr-datagrid-detail-pane-bg-color;
    overflow: hidden;
    display: block;
    flex-grow: 2;
    width: 66%;
  }

  .datagrid-detail-pane-content {
    display: flex;
    flex-direction: column;
    overflow: auto;
    height: 100%;
    padding: datagrid-variables.$clr-datagrid-detail-pane-content-padding;
  }

  .datagrid-detail-body {
    flex: 1 1 auto;
    padding: tokens.$cds-global-space-7 0;
    color: datagrid-variables.$clr-datagrid-detail-body-text-color;
  }

  .datagrid-detail-header {
    flex: 0 0 auto;
    @include mixins.generate-typography-token('SECTION-20-STD');
    margin-top: 0;
    display: flex;
    flex-direction: row;

    .datagrid-detail-header-title {
      flex: 1 1 auto;
      color: datagrid-variables.$clr-datagrid-detail-header-title-color;
    }

    .datagrid-detail-pane-close {
      flex: 1 1 tokens.$cds-global-space-11;
      display: flex;
      justify-content: flex-end;

      .btn.btn-link {
        min-width: auto;
        margin: 0;
        padding-right: 0;

        cds-icon {
          @include mixins.min-equilateral(datagrid-variables.$clr-datagrid-detail-pane-close-icon-size);
          color: modal-variables.$clr-modal-close-color;
        }
      }
    }
  }

  .datagrid-detail-caret {
    display: flex;
    justify-content: center;

    &.datagrid-cell {
      padding: tokens.$cds-global-space-3 0;
    }

    .datagrid-detail-caret-button {
      @include mixins.clr-no-styles-button();
      cursor: pointer;
      @include mixins.equilateral(tokens.$cds-global-space-9);

      &.is-open {
        background-color: datagrid-variables.$clr-datagrid-detail-caret-icon-open-bg-color;
        border-radius: tokens.$cds-alias-object-border-radius-100;

        .datagrid-detail-caret-icon {
          color: datagrid-variables.$clr-datagrid-detail-caret-icon-open-icon-color;
        }
      }
    }

    .datagrid-detail-caret-icon {
      color: datagrid-variables.$clr-datagrid-icon-color;
    }

    .spinner {
      margin-top: tokens.$cds-global-space-4;
    }

    &.datagrid-column {
      padding: tables-variables.$clr-table-topcellpadding tables-variables.$clr-table-cellpadding
        tables-variables.$clr-table-bottomcellpadding;
    }
  }

  // Small screens should only display the detail pane when opened, or optionally forced by a class
  .datagrid-detail-overlay {
    // too specific query needed to avoid issues with nested datagrids
    &.datagrid-detail-open > .datagrid-outer-wrapper > .datagrid-inner-wrapper {
      display: none;
    }

    .datagrid-detail-pane {
      border-left: tokens.$cds-alias-object-border-width-100 solid;
      border-color: datagrid-variables.$clr-datagrid-detail-pane-border-color;
      border-radius: tokens.$cds-alias-object-border-radius-100;
    }
  }

  @media screen and (max-width: map.get(variables.$clr-grid-breakpoints, sm)) {
    // too specific query needed to avoid issues with nested datagrids
    .datagrid-detail-open > .datagrid-outer-wrapper > .datagrid-inner-wrapper {
      display: none;
    }

    .datagrid-detail-pane {
      border-left: tokens.$cds-alias-object-border-width-100 solid;
      border-color: datagrid-variables.$clr-datagrid-detail-pane-border-color;
      border-radius: tokens.$cds-alias-object-border-radius-100;
    }
  }

  /**
   * Smart popover contents
   */
  .column-switch {
    border-radius: tokens.$cds-alias-object-border-radius-100;
    padding: tokens.$cds-global-space-8;
    background-color: datagrid-variables.$clr-datagrid-popover-bg-color;
    border-width: tokens.$cds-alias-object-border-width-100;
    border-style: solid;
    border-color: datagrid-variables.$clr-datagrid-popover-border-color;
    @include clr-datagrid-popover-shadows();
    width: mixins.baselinePx(250);
    display: flex;
    flex-direction: column;
    z-index: map.get(variables.$clr-layers, column-switch); // Keeps the popup above the datagrid header.

    .switch-header {
      display: flex;
      justify-content: space-between;
      @include mixins.generate-typography-token('SUBSECTION-16-EXP');

      // From accessibility perspective we let use of header tags inside the switch header,
      // but want not to be affected from the global header styles so this is a workaround.
      h1,
      h2,
      h3,
      h4,
      h5,
      h6 {
        color: variables.$clr-p1-color;
        @include mixins.generate-typography-token('SUBSECTION-16-EXP');
        margin: 0;
      }

      button {
        min-width: tokens.$cds-global-space-8;
        margin: 0;
        padding: 0;

        cds-icon {
          color: datagrid-variables.$clr-datagrid-column-switch-header-font-color;

          &:hover {
            color: datagrid-variables.$clr-datagrid-column-switch-header-font-hover-color;
          }
          &:active {
            color: datagrid-variables.$clr-datagrid-column-switch-header-font-active-color;
          }
        }
      }
    }

    .switch-content {
      max-height: mixins.baselinePx(300);
      overflow-y: auto;
      min-height: calc(
        tokens.$cds-global-space-9 + tokens.$cds-alias-object-border-width-100
      ); // prevents scrollbars in IE.

      li {
        line-height: tokens.$cds-global-space-9;
        padding-left: tokens.$cds-global-space-2;
      }
    }

    .switch-footer {
      .btn {
        margin: 0;
        padding: 0;
      }

      .action-right {
        display: flex;
        justify-content: flex-end;
      }
    }
  }

  .datagrid-filter {
    margin-top: tokens.$cds-global-space-3;
    background: datagrid-variables.$clr-datagrid-popover-bg-color;
    border-width: tokens.$cds-alias-object-border-width-100;
    border-style: solid;
    border-color: datagrid-variables.$clr-datagrid-popover-border-color;
    padding: tokens.$cds-global-space-8;
    @include clr-datagrid-popover-shadows;
    border-radius: tokens.$cds-alias-object-border-radius-100;
    font-weight: normal;

    .datagrid-filter-close-wrapper {
      text-align: right;

      .close {
        float: none;
      }
    }

    // FIXME: remove
    .datagrid-filter-apply {
      margin-bottom: 0;
    }
  }

  .datagrid-action-overflow {
    @include datagrid-action-overflow-appearance();
  }

  /* END Datagrid Smart Popover Content Styles

  /**
   * These classes are used in table-renderer.ts when it puts the datagrid into in tableMode and computes column
   * widths. NOTE: they are only applied during calculation and then removed.
   */

  /**
   * When in calculate mode
   * - Hide the display elements for datagrid
   * - Switch display mode for elements with projected content to calcualte sizes.
   */
  .datagrid-host.datagrid-calculate-mode {
    display: block;

    // Hide parts of the display table not used for calculation.
    .datagrid,
    .datagrid-footer,
    .datagrid-row-master,
    .datagrid-row-clickable {
      display: none;
    }

    .datagrid-calculation-table {
      display: table;
      table-layout: auto;

      .datagrid-calculation-header {
        display: table-header-group;

        .datagrid-column {
          display: table-cell;
          min-width: tokens.$cds-global-space-15;
        }

        .datagrid-column {
          // This is a hack b/c styles were not applied out of the box when moving columns into the
          // calculation container element
          border-color: tables-variables.$clr-tablerow-bordercolor;
          border-width: tables-variables.$clr-table-borderwidth;
          border-style: solid;
          padding: tables-variables.$clr-table-topcellpadding tables-variables.$clr-table-cellpadding
            tables-variables.$clr-table-bottomcellpadding;
          vertical-align: top;
          @include mixins.generate-typography-token('CAPTION-LG-11');
          margin-top: tokens.$cds-global-space-9;
          margin-bottom: 0;
        }
      }

      .datagrid-row {
        display: table-row;

        .datagrid-cell {
          // This is a hack b/c styles were not applied out of the box when moving columns into the
          // calculation container element
          display: table-cell;
          min-width: tokens.$cds-global-space-15;
          @include mixins.generate-typography-token('BODY-14-RG-CPT');
          padding: tables-variables.$clr-table-topcellpadding tables-variables.$clr-table-cellpadding
            tables-variables.$clr-table-bottomcellpadding;
          vertical-align: top;
        }
      }
    }

    // Hide other elements that come along for the ride
    .datagrid-column-separator {
      display: none;
    }

    .datagrid-placeholder-container {
      display: none;
    }

    .datagrid-fixed-column {
      display: none;
    }
  }

  // END Calculation classes.
}
