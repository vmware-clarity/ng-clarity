/*
 * Copyright (c) 2016-2023 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */

@use 'sass:meta';
@use '../../accordion/variables.accordion' as accordion-variables;
@use '../../image/icons.clarity';
@use '../../image/images.clarity';
@use '../../utils/mixins';
@use '../../utils/variables/variables';
@use 'variables.stack-view' as stack-view-variables;
@use '@cds/core/tokens/tokens.scss';

@mixin lastElementBottomBorder() {
  border-bottom: none;
  // IE/OldEdge
  box-shadow: 0 tokens.$cds-global-space-1 0 stack-view-variables.$clr-stack-view-border-box-color;
}

@include meta.load-css('properties.stack-view');

@include mixins.exports('stack-view.clarity') {
  .stack-header {
    display: flex;
    align-items: flex-end;

    .stack-title {
      display: block;
      flex: 1 1 auto;
      margin: 0;
      padding: tokens.$cds-global-space-5 0;
      color: tokens.$cds-alias-typography-color-400;

      @include mixins.generate-typography-token('SUBSECTION-16-EXP');
    }

    .stack-actions {
      display: block;
      flex: 0 0 auto;

      .stack-action {
        min-width: tokens.$cds-global-space-11;
      }
    }
  }

  .stack-view {
    overflow-y: auto;
    word-wrap: break-word;
    margin-top: 0;
    border: stack-view-variables.$clr-stack-view-border-width solid stack-view-variables.$clr-stack-view-border-color;
    border-radius: stack-view-variables.$clr-stack-view-border-radius;
    color: stack-view-variables.$clr-stack-view-color;
    background-color: stack-view-variables.$clr-stack-view-bg-color;

    dd,
    dt {
      // One of the caveats of using definition lists here. Browsers automatically style them in unpredictable ways... :(
      -webkit-margin-start: 0;
      margin-inline-start: 0;
      margin-left: 0;
    }

    .stack-block {
      display: flex;
      // Wrapping for nested stack-blocks
      flex-flow: row wrap;
      overflow-y: hidden;
      border-bottom-width: stack-view-variables.$clr-stack-view-border-width;
      border-bottom-style: solid;
      border-bottom-color: stack-view-variables.$clr-stack-view-stack-block-border-bottom;
    }

    // We have to handle potential nested elements, typically for web components
    > .stack-block:last-child,
    > :last-child .stack-block:last-of-type {
      // This way we keep a border-bottom on the last element if the stack view is higher
      // than the total height of the  blocks it contains, but we do not have a
      // weird 1px scroll when both heights match exactly.
      @include lastElementBottomBorder();
    }

    .stack-block-changed::before {
      content: ' ';
      position: absolute;
      @include mixins.equilateral(0);
      border-top: tokens.$cds-global-space-5 solid stack-view-variables.$clr-stack-block-changed-border-top-color;
      border-right: tokens.$cds-global-space-5 solid transparent;
    }

    .stack-block-content {
      background-color: inherit;
    }

    .stack-block-caret {
      align-self: center;
    }

    .stack-block-label {
      padding: tokens.$cds-global-space-5 tokens.$cds-global-space-6;
      background-color: stack-view-variables.$clr-stack-view-stack-block-label-and-content-bg-color;
      color: stack-view-variables.$clr-stack-view-stack-block-label-text-color;

      @include mixins.generate-typography-token(
        'SECONDARY-13-RG-STD',
        (
          font-size: stack-view-variables.$clr-stack-view-stack-block-label-font-size,
          font-weight: stack-view-variables.$clr-stack-view-stack-block-label-font-weight,
          line-height: stack-view-variables.$clr-stack-view-stack-block-label-line-height,
          letter-spacing: stack-view-variables.$clr-stack-view-stack-block-label-letter-spacing,
        )
      );

      // We're doing a non-flexible item.
      // It's just easier to align and stretch everything vertically this way than with
      // floats or inline-blocks.
      flex: 1 1 auto;
      display: flex;

      // ATM
      // before section is caret placeholder remove it and replace it with pure padding right
      // padding-right: var(--cds-global-space-9);
      &::before {
        display: inline-block;
        content: '';
        float: left;
        @include mixins.equilateral(tokens.$cds-global-space-7);
        margin: tokens.$cds-global-space-3 tokens.$cds-global-space-5 0 0;
        text-align: center;
      }

      &:focus {
        outline-color: Highlight;
        outline-color: -webkit-focus-ring-color;
        outline-style: auto;
        outline-width: tokens.$cds-global-space-1;
        outline-offset: calc(-1 * tokens.$cds-global-space-1);
      }
    }

    .stack-view-key {
      flex: 0 0 40%;
      max-width: 40%;
      margin: 0 tokens.$cds-global-space-7 0 0;
    }

    .stack-block-caret {
      @include mixins.equilateral(tokens.$cds-global-space-7);
      margin-right: tokens.$cds-global-space-5;
      fill: stack-view-variables.$clr-stack-view-stack-block-caret-color;
    }

    .stack-block-content {
      color: stack-view-variables.$clr-stack-view-stack-block-content-text-color;
      flex: 1 1 auto;
      width: 60%;
      margin-bottom: 0;

      @include mixins.clr-container;
    }

    .stack-children {
      flex: 0 0 auto;
      width: 100%;

      .stack-block {
        border-bottom-color: stack-view-variables.$clr-stack-view-stack-children-stack-block-border-bottom-color;
      }

      > .stack-block:last-child,
      > :last-child .stack-block:last-of-type {
        // This way we keep a border-bottom on the last element if the stack view is higher
        // than the total height of the  blocks it contains, but we do not have a
        // weird 1px scroll when both heights match exactly.
        @include lastElementBottomBorder();
      }

      .stack-block-label,
      .stack-block-content {
        background-color: stack-view-variables.$clr-stack-view-stack-children-stack-block-label-and-content-bg-color;
      }

      .stack-block-label {
        padding-left: variables.$clr_baselineRem_1;
      }
    }

    .stack-block-expandable {
      > .stack-block-label {
        cursor: pointer;

        &::before {
          background-image: icons.generateCaretIcon(accordion-variables.$clr-accordion-text-color);
          @include images.icon-background-styles();
          transform: rotate(-90deg);
          @include mixins.equilateral(tokens.$cds-global-space-7);
        }
      }

      > .stack-block-label,
      > .stack-block-content {
        transition: background-color 0.2s ease-in-out, color 0.2s ease-in-out;
      }

      &:hover:not(.stack-block-expanded) {
        > .stack-block-label {
          color: var(--clr-stack-view-stack-block-expandable-hover);
          background-color: var(--clr-stack-view-stack-block-expandable-bg-hover);

          .stack-block-caret {
            fill: var(--clr-stack-view-stack-block-expandable-hover-caret-color);
          }
        }

        &:active {
          > .stack-block-label {
            color: var(--clr-stack-view-stack-block-expandable-active);
            background-color: var(--clr-stack-view-stack-block-expandable-bg-active);

            .stack-block-caret {
              fill: var(--clr-stack-view-stack-block-expandable-active-caret-color);
            }
          }
        }
      }
    }

    .stack-block-expanded {
      > .stack-block-label::before {
        transform: rotate(0deg);
      }

      > .stack-block-label {
        border-bottom-width: stack-view-variables.$clr-stack-view-border-width;
        border-bottom-style: solid;
        border-bottom-color: stack-view-variables.$clr-stack-view-stack-block-border-bottom;

        color: stack-view-variables.$clr-stack-view-stack-block-expanded-text-color;
        background-color: stack-view-variables.$clr-stack-view-stack-block-expanded-bg-color;

        .stack-block-caret {
          fill: var(--clr-stack-view-stack-block-expanded-caret-color);
        }

        &:hover {
          color: var(--clr-stack-view-stack-block-expandable-text-hover);
          background-color: var(--clr-stack-view-stack-block-expandable-bg-hover);

          .stack-block-caret {
            fill: var(--clr-stack-view-stack-block-expandable-hover-caret-color);
          }

          &:active {
            color: var(--clr-stack-view-stack-block-expandable-active);
            background-color: var(--clr-stack-view-stack-block-expandable-bg-active);

            .stack-block-caret {
              fill: var(--clr-stack-view-stack-block-expandable-active-caret-color);
            }
          }
        }
      }
    }

    /*
      Styles specific to stack views used in a modal
    */
    .modal & {
      margin-bottom: 0;
    }
  }

  //Disable the generated icon without a breaking change for the stackview static markup
  //Only targets the Angular component as of now. Static will require a breaking change.
  .stack-view {
    clr-stack-block.stack-block-expandable {
      .stack-block-label::before {
        content: none;
      }
    }

    .stack-children clr-stack-block,
    .stack-children {
      .stack-block-label {
        padding-left: tokens.$cds-global-space-12;

        &::before {
          display: none;
        }
      }
    }
  }
}
