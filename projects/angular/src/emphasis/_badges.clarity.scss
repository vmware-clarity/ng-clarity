/*
 * Copyright (c) 2016-2023 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */

@use 'sass:meta';
@use '../utils/mixins';
@use '@cds/core/tokens/tokens.scss';
@include meta.load-css('properties.badges');

@function getBadgeCssVarName($type: gray, $prop: color) {
  @return #{'clr-badge-' + $type + '-' + $prop};
}

@mixin generateBadgeStyles($color: gray, $alias: 1) {
  &.badge-#{'' + $color},
  &.badge-#{$alias} {
    background: var(--#{getBadgeCssVarName($color, bg-color)});
    color: var(--#{getBadgeCssVarName($color, color)});
  }
}

@mixin generateStatusBadgeStyles($status: info) {
  &.badge-#{$status} {
    background: var(--#{getBadgeCssVarName($status, bg-color)});
    color: var(--#{getBadgeCssVarName($status, color)});
  }
}

@include mixins.exports('badges.clarity') {
  //NOTE: Had to use inline-flex, reset line-height to normal, and had to use change a few values
  //instead of using our baselineRem function. This was done to achieve the desired look
  //and to align this with our vertical baseline. Not sure why but aligning inline-blocks within inline-blocks
  //is a bit tricky. I initially used display: inline-block but I wasn't able to align the badges properly.
  //TODO: I still am unable to align the badges center of the baseline but have managed to aligned it to the
  //bottom. There are no margins which are influencing this. Need to figure out whats the issue.
  .badge {
    display: inline-flex;
    vertical-align: middle;
    align-items: center;
    justify-content: center;
    min-width: var(--clr-badge-min-width);
    background-color: var(--clr-badge-background-color);
    height: var(--clr-badge-height);
    border-radius: var(--clr-badge-border-radius);
@include mixins.generate-typography-token('CAPTION-SM-10');

    padding: var(--clr-badge-padding);
    // TODO: Should we refactor/tokenize this?
    margin-right: #{tokens.$cds-global-space-4};
    white-space: nowrap;
    text-align: center;
    color: var(--clr-badge-color);

    &:visited {
      color: var(--clr-badge-color);
    }

    // Link badge, default, no color or type specifier. Override a:link setting.
    &:link {
      background-color: var(--#{getBadgeCssVarName(gray, bg-color)});
      color: var(--#{getBadgeCssVarName(gray, color)});
    }

    @include generateBadgeStyles(gray, 1);
    @include generateBadgeStyles(purple, 2);
    @include generateBadgeStyles(blue, 3);
    @include generateBadgeStyles(orange, 4);
    @include generateBadgeStyles(light-blue, 5);

    @include generateStatusBadgeStyles(info);
    @include generateStatusBadgeStyles(success);
    @include generateStatusBadgeStyles(danger);
    @include generateStatusBadgeStyles(warning);
  }

  @include mixins.fixForIE10AndUp {
    .badge {
      padding: #{tokens.$cds-global-space-2} calc(#{tokens.$cds-global-space-1} + #{tokens.$cds-global-space-2}) 0;
    }
  }

  @include mixins.fixForMsEdge {
    .badge {
      padding: #{tokens.$cds-global-space-2} calc(#{tokens.$cds-global-space-1} + #{tokens.$cds-global-space-2}) 0;
    }
  }
}
