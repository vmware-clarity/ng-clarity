/*
 * Copyright (c) 2016-2023 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */

@use 'sass:meta';
@use '../utils/mixins';
@use '../utils/variables/variables.global';
@use 'variables.badges' as badges-variables;
@use 'variables.label' as label-variables;
@include meta.load-css('properties.badges');

@mixin generateBadgeStyles($color: gray, $alias: 1) {
  &.badge-#{'' + $color},
  &.badge-#{$alias} {
    background: var(--#{badges-variables.getBadgeColor($color, bg-color, 'css-var')});
    color: var(--#{badges-variables.getBadgeColor($color, color, 'css-var')});
  }
}

@mixin generateStatusBadgeStyles($status: info) {
  &.badge-#{$status} {
    background: var(--#{badges-variables.getBadgeColor($status, bg-color, 'css-var')});
    color: var(--#{badges-variables.getBadgeColor($status, color, 'css-var')});
  }
}

@include mixins.exports('badges.clarity') {
  //NOTE: Had to use inline-flex, reset line-height to normal, and had to use change a few values
  //instead of using our baselineRem function. This was done to achieve the desired look
  //and to align this with our vertical baseline. Not sure why but aligning inline-blocks within inline-blocks
  //is a bit tricky. I initially used display: inline-block but I wasn't able to align the badges properly.
  //TODO: I still am unable to align the badges center of the baseline but have managed to aligned it to the
  //bottom. There are no margins which are influencing this. Need to figure out whats the issue.
  .badge {
    display: inline-flex;
    vertical-align: middle;
    align-items: center;
    justify-content: center;
    min-width: var(--clr-badge-min-width);
    background-color: var(--clr-badge-background-color);
    height: var(--clr-badge-height);
    border-radius: var(--clr-badge-border-radius);
    font-size: var(--clr-badge-font-size);
    font-weight: var(--clr-badge-font-weight);
    letter-spacing: var(--clr-badge-letter-spacing);
    line-height: var(--clr-badge-line-height);

    padding: var(--clr-badge-padding);
    // TODO: Should we refactor/tokenize this?
    margin-right: variables.$clr_baselineRem_0_25;
    white-space: nowrap;
    text-align: center;
    color: var(--clr-badge-color);

    &:visited {
      color: var(--clr-badge-color);
    }

    // Link badge, default, no color or type specifier. Override a:link setting.
    &:link {
      background-color: var(--#{badges-variables.getBadgeColor(gray, bg-color, 'css-var')});
      color: var(--#{badges-variables.getBadgeColor(gray, color, 'css-var')});
    }

    @include generateBadgeStyles(gray, 1);
    @include generateBadgeStyles(purple, 2);
    @include generateBadgeStyles(blue, 3);
    @include generateBadgeStyles(orange, 4);
    @include generateBadgeStyles(light-blue, 5);

    @include generateStatusBadgeStyles(info);
    @include generateStatusBadgeStyles(success);
    @include generateStatusBadgeStyles(danger);
    @include generateStatusBadgeStyles(warning);
  }

  @include mixins.fixForIE10AndUp {
    .badge {
      padding: variables.$clr_baselineRem_2px variables.$clr_baselineRem_0_125 0;
    }
  }

  @include mixins.fixForMsEdge {
    .badge {
      padding: variables.$clr_baselineRem_2px variables.$clr_baselineRem_0_125 0;
    }
  }
}
