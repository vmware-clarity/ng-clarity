/*
 * Copyright (c) 2016-2023 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */

@use 'sass:meta';
@use '../../popover/dropdown/menu-mixins.clarity';
@use '../../popover/dropdown/variables.dropdown' as dropdown-variables;
@use '../../utils/mixins';
@use '../../utils/variables/variables';
@use '../styles/mixins.forms' as styles-mixins;
@use '../styles/variables.forms' as forms-variables;
@use 'variables.combobox' as combobox-variables;
@include meta.load-css('properties.combobox');

@function caret-gap() {
  // ATM (after token migration)
  // Remove after the shim is gone.
  // css-var mixin won't work here for the padding-right, as it's a composition of several different tokens and static sizes
  // reworking the structure to join these items can only be done after the shim is gone.
  // NOTE: --clr-combobox-trigger-gap and --clr-combobox-trigger-padding-right should NOT be declared in the _properties file
  // for this to work!
  $clr-caret-icon-size: variables.$clr_baselineRem_12px;
  $clr-input-field-padding: variables.$clr_baselineRem_0_25;
  @if variables.$clr-use-custom-properties == true AND var(--clr-combobox-trigger-gap) {
    // This assignment compensates the static icon size value so it can be included in the right padding as part of the
    // trigger-gap token.
    // Additional compensation is needed for the removed input field padding
    @return calc(
      var(
          --clr-combobox-trigger-gap,
          calc(combobox-variables.$clr-combobox-trigger-right-padding - $clr-caret-icon-size)
        ) + $clr-caret-icon-size + var(--clr-combobox-trigger-padding-right, $clr-input-field-padding)
    );
  } @else {
    @return calc(combobox-variables.$clr-combobox-trigger-right-padding + $clr-input-field-padding);
  }
}

@include mixins.exports('combobox.clarity') {
  // needed for the proper calculation of popover offset that we do to keep label always visible
  .clr-combobox-form-control {
    align-items: stretch;

    .clr-error .clr-validate-icon {
      margin-left: 0;
    }
  }

  // Focus indicator, this is a custom implementation compared with other controls due to DOM structure and potential growth of height
  .clr-focus-indicator {
    @include mixins.css-var(
      background-color,
      clr-forms-focused-color,
      forms-variables.$clr-forms-focused-color,
      variables.$clr-use-custom-properties
    );
    height: variables.$clr_baselineRem_2px;
    width: 0;
    transition: width 0.2s ease;
    position: absolute;
    bottom: -(variables.$clr_baselineRem_1px);
    left: 0;
    @include mixins.css-var(
      border-bottom-left-radius,
      clr-combobox-border-radius,
      combobox-variables.$clr-combobox-border-radius,
      variables.$clr-use-custom-properties
    );
    @include mixins.css-var(
      border-bottom-right-radius,
      clr-combobox-border-radius,
      combobox-variables.$clr-combobox-border-radius,
      variables.$clr-use-custom-properties
    );
  }
  .clr-focus {
    width: 100%;
  }
  .clr-error .clr-focus-indicator {
    @include mixins.css-var(
      background-color,
      clr-forms-invalid-color,
      forms-variables.$clr-forms-invalid-color,
      variables.$clr-use-custom-properties
    );
  }

  .clr-combobox-wrapper {
    position: relative;

    //Dimensions
    padding: 0 caret-gap() 0 combobox-variables.$clr-combobox-trigger-left-padding;
    @include mixins.css-var(
      padding-left,
      clr-combobox-padding-left,
      combobox-variables.$clr-combobox-trigger-left-padding,
      variables.$clr-use-custom-properties
    );

    @include mixins.css-var(
      min-height,
      clr-combobox-min-height,
      combobox-variables.$clr-combobox-min-height,
      variables.$clr-use-custom-properties
    );
    @include mixins.css-var(
      min-width,
      clr-combobox-min-width,
      combobox-variables.$clr-combobox-min-width,
      variables.$clr-use-custom-properties
    );
    .clr-input {
      padding-right: 0;
      @include mixins.css-var(
        padding-left,
        clr-combobox-input-left,
        variables.$clr_baselineRem_0_25,
        variables.$clr-use-custom-properties
      );
      // ATM remove
      @include mixins.css-var(
        max-height,
        clr-combobox-input-height,
        variables.$clr_baselineRem_1_25,
        variables.$clr-use-custom-properties
      );
      &:not(:disabled) {
        @include mixins.css-var(color, clr-combobox-text-color, inherit, variables.$clr-use-custom-properties);
      }
    }
    @include mixins.css-var(
      font-size,
      clr-combobox-font-size,
      combobox-variables.$clr-combobox-font-size,
      variables.$clr-use-custom-properties
    );
    @include mixins.css-var(font-weight, clr-combobox-font-weight, inherit, variables.$clr-use-custom-properties);

    &.multi {
      min-width: calc(min(combobox-variables.$clr-ng-multiselect-min-width, 100%));
      padding-bottom: variables.$clr_baselineRem_0_125;
    }

    //Mixins
    @include styles-mixins.form-fields-appearance(forms-variables.$clr-forms-border-color);

    // override the above mixin for combobox-specific styles
    @include mixins.css-var(
      background-color,
      clr-combobox-input-background-color,
      combobox-variables.$clr-combobox-input-background-color,
      variables.$clr-use-custom-properties
    );

    border-width: variables.$clr-global-borderwidth;
    border-style: solid;
    @include mixins.css-var(
      border-color,
      clr-combobox-border-color,
      combobox-variables.$clr-combobox-border-color,
      variables.$clr-use-custom-properties
    );

    @include mixins.css-var(
      border-bottom-color,
      clr-combobox-border-bottom-color,
      forms-variables.$clr-forms-border-color,
      variables.$clr-use-custom-properties
    );

    @include mixins.css-var(
      border-radius,
      clr-combobox-border-radius,
      combobox-variables.$clr-combobox-border-radius,
      variables.$clr-use-custom-properties
    );

    // the border color is on the component; we don't want it on the input itself
    .clr-input.clr-combobox-input:focus {
      background: none;
    }

    &.invalid {
      border-bottom-color: forms-variables.$clr-forms-invalid-color;
    }

    //Others
    .clr-combobox-input {
      background: none;
      border-bottom: none;
      @include mixins.css-var(vertical-align, clr-combobox-input-align, baseline, variables.$clr-use-custom-properties);
    }

    .clr-combobox-remove-btn {
      background: transparent;
      border: none;
      cursor: pointer;
      padding: variables.$clr_baselineRem_3px variables.$clr_baselineRem_3px;
      color: combobox-variables.$clr-combobox-pill-font-color;
      @include mixins.css-var(
        color,
        clr-combobox-pill-remove-icon-color,
        combobox-variables.$clr-combobox-pill-font-color,
        variables.$clr-use-custom-properties
      );
    }

    .label-combobox-pill {
      // Utility/CAPTION-LG-11 implemented as P6 in Design Tokens
      // but original NG theme implemented as P7
      @include mixins.css-var(
        font-weight,
        clr-combobox-pill-font-weight,
        variables.$clr-p7-font-weight,
        variables.$clr-use-custom-properties
      );
      @include mixins.css-var(
        font-size,
        clr-combobox-pill-font-size,
        variables.$clr-p7-font-size,
        variables.$clr-use-custom-properties
      );
      @include mixins.css-var(
        line-height,
        clr-combobox-pill-line-height,
        variables.$clr-p7-font-size + variables.$clr_baselineRem_1px,
        variables.$clr-use-custom-properties
      );
      @include mixins.css-var(
        letter-spacing,
        clr-combobox-pill-letter-spacing,
        variables.$clr-p7-letter-spacing,
        variables.$clr-use-custom-properties
      );

      @include mixins.css-var(
        height,
        clr-combobox-pill-height,
        variables.$clr_baselineRem_0_875,
        variables.$clr-use-custom-properties
      );
      @include mixins.css-var(
        margin,
        clr-combobox-pill-margin,
        variables.$clr_baselineRem_0_125 variables.$clr_baselineRem_0_25 0 0,
        variables.$clr-use-custom-properties
      );
      @include mixins.css-var(
        background-color,
        clr-combobox-pill-background-color,
        combobox-variables.$clr-combobox-pill-background-color,
        variables.$clr-use-custom-properties
      );
      border-width: variables.$clr_baselineRem_1px;
      border-style: solid;

      // ATM Remove fallback and property
      @include mixins.css-var(
        align-items,
        clr-combobox-pill-align-items,
        baseline,
        variables.$clr-use-custom-properties
      );
      @include mixins.css-var(
        border-radius,
        clr-combobox-pill-border-radius,
        combobox-variables.$clr-combobox-pill-border-radius,
        variables.$clr-use-custom-properties
      );
      @include mixins.css-var(
        border-color,
        clr-combobox-pill-border-color,
        combobox-variables.$clr-combobox-pill-border-color,
        variables.$clr-use-custom-properties
      );

      @include mixins.css-var(
        padding,
        clr-combobox-pill-padding,
        0 variables.$clr_baselineRem_2px 0 variables.$clr_baselineRem_4px,
        variables.$clr-use-custom-properties
      );

      .clr-combobox-pill-content {
        @include mixins.css-var(
          color,
          clr-combobox-pill-font-color,
          combobox-variables.$clr-combobox-pill-font-color,
          variables.$clr-use-custom-properties
        );
        font-size: variables.$clr-typography-xxsmalltext;
        font-weight: variables.$clr-font-weight-regular;
        @include mixins.css-var(
          padding,
          clr-combobox-pill-content-padding,
          0 variables.$clr_baselineRem_8px 0 variables.$clr_baselineRem_4px,
          variables.$clr-use-custom-properties
        );
      }

      cds-icon,
      clr-icon {
        @include mixins.css-var(margin-top, clr-combobox-item-icon-override, 0, variables.$clr-use-custom-properties);
      }

      cds-icon[shape='window-close'],
      clr-icon[shape='window-close'] {
        @include mixins.css-var(
          color,
          clr-combobox-pill-font-color,
          combobox-variables.$clr-combobox-pill-font-color,
          variables.$clr-use-custom-properties
        );
      }
    }

    .clr-combobox-input-wrapper {
      border: none;
      background: none;
    }

    &:not(.disabled):hover,
    &:focus-within {
      @include mixins.css-var(
        background-color,
        clr-combobox-hover-background-color,
        combobox-variables.$clr-combobox-input-background-color,
        variables.$clr-use-custom-properties
      );
    }
  }

  .clr-combobox-trigger {
    &:disabled {
      color: var(--clr-btn-link-disabled-color, #666);
      opacity: 0.4;
    }

    //Dimensions
    @include mixins.css-var(
      padding-left,
      clr-combobox-trigger-padding-left,
      combobox-variables.$clr-combobox-trigger-left-padding,
      variables.$clr-use-custom-properties
    );

    @include mixins.css-var(
      padding-right,
      clr-combobox-trigger-padding-right,
      // not an error; we're reusing "left" variable for the "right" fallback
      combobox-variables.$clr-combobox-trigger-left-padding,
      variables.$clr-use-custom-properties
    );

    margin: auto;
    position: absolute;
    top: 0;
    bottom: 0;
    right: 0;

    //Other
    background: none;
    border: none;
    color: currentColor;
    cursor: pointer;
    outline: none;

    cds-icon[shape='angle'],
    clr-icon[shape='angle'] {
      @include mixins.css-var(
        color,
        clr-combobox-trigger-font-color,
        combobox-variables.$clr-combobox-pill-font-color,
        variables.$clr-use-custom-properties
      );

      @include mixins.min-equilateral-var(
        clr-combobox-caret-icon-size,
        variables.$clr_baselineRem_12px,
        variables.$clr-use-custom-properties
      );
    }
  }

  .clr-combobox-options {
    @include menu-mixins.generate-dropdown-menu();
    position: static;

    max-height: variables.$clr_baselineRem_10;
    overflow-y: scroll;

    visibility: visible;

    .clr-combobox-options-loading {
      padding: variables.$clr_baselineRem_0_125 variables.$clr_baselineRem_1;

      .clr-combobox-options-loading-text {
        padding-left: variables.$clr_baselineRem_0_25;
      }
    }

    .clr-combobox-options-empty-text {
      padding-left: variables.$clr_baselineRem_0_5;
    }
  }

  .clr-combobox-option {
    @include menu-mixins.generate-dropdown-item();
    // Manual pseudo focus handling
    &.clr-focus {
      @include mixins.css-var(
        background-color,
        clr-combobox-active-background-color,
        dropdown-variables.$clr-dropdown-bg-hover-color,
        variables.$clr-use-custom-properties
      );
    }
  }

  //NOTE: Adjust the height of the option only when it's in the options menu
  .clr-combobox-options .clr-combobox-option {
    @include menu-mixins.generate-dropdown-item-height();
  }

  .clr-combobox-options .clr-combobox-option {
    &:hover,
    &.active {
      @include mixins.css-var(
        color,
        clr-dropdown-item-color,
        dropdown-variables.$clr-dropdown-item-color,
        variables.$clr-use-custom-properties
      );
    }
  }

  .clr-combobox-disabled {
    @include styles-mixins.disabled-form-fields();

    .clr-combobox-input,
    .clr-combobox-remove-btn,
    .clr-combobox-trigger {
      cursor: not-allowed;
    }
  }

  .clr-filter-highlight b {
    font-weight: variables.$clr-font-weight-semibold;
    @include mixins.css-var(
      color,
      clr-combobox-filter-highlight,
      combobox-variables.$clr-combobox-filter-highlight,
      variables.$clr-use-custom-properties
    );
  }
}
