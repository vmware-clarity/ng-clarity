/*
 * Copyright (c) 2016-2023 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
@use 'sass:map';
@use '../../image/icons.clarity';
@use '../../image/images.clarity';
@use '../../utils/mixins';
@use '../../utils/variables/variables.global';
@use 'mixins.forms' as forms-mixins;
@use 'variables.forms' as forms-variables;

@include mixins.exports('forms.select') {
  .clr-select-wrapper,
  .clr-multiselect-wrapper {
    position: relative;
    white-space: nowrap;

    select {
      @include forms-mixins.custom-inputs(variables.$clr_baselineRem_1);
      @include forms-mixins.form-fields-appearance();
      &:not([multiple]) {
        @include forms-mixins.input-border-bottom-animation();
      }
      &[multiple]:focus {
        @include mixins.include-slim-outline-style-form-fields();
      }
      position: relative;
      padding: 0 (forms-variables.$clr-forms-select-caret-size + forms-variables.$clr-forms-baseline * 2) 0
        forms-variables.$clr-forms-baseline;
      cursor: pointer;
      font-size: forms-variables.$clr-forms-field-font-size;

      //Moves the :after pseudo element (arrow) to the back so that clicking over it activates
      //the dropdown.
      z-index: map.get(variables.$clr-layers, select-box);

      &:hover,
      &:active {
        @include mixins.css-var(
          border-color,
          clr-forms-select-hover-border-color,
          forms-variables.$clr-forms-select-hover-border-color,
          variables.$clr-use-custom-properties
        );
        @include mixins.css-var(
          background,
          clr-forms-select-hover-background,
          forms-variables.$clr-forms-select-hover-background,
          variables.$clr-use-custom-properties
        );

        &:disabled {
          cursor: not-allowed;
          @include mixins.css-var(
            border-color,
            clr-forms-select-disabled-border-color,
            forms-variables.$clr-forms-select-disabled-border-color,
            variables.$clr-use-custom-properties
          );
        }
      }

      &:disabled option {
        @include forms-mixins.disabled-form-fields();
      }

      option {
        @include mixins.css-var(
          color,
          clr-forms-select-option-color,
          forms-variables.$clr-forms-select-option-color,
          variables.$clr-use-custom-properties
        );
      }
    }

    //Remove default arrow from IE
    select::-ms-expand {
      display: none;
    }
  }

  .clr-select-wrapper {
    max-height: forms-variables.$clr-forms-baseline * 4;
    display: inline-block;

    &::after {
      position: absolute;
      content: '';
      @include mixins.equilateral(forms-variables.$clr-forms-select-caret-size);
      top: (forms-variables.$clr-forms-baseline * 4 - forms-variables.$clr-forms-select-caret-size) * 0.5;
      right: forms-variables.$clr-forms-baseline;
      // TODO: get rid of generated icons?
      background-image: icons.generateCaretIcon(forms-variables.$clr-forms-select-caret-color);
      @include images.icon-background-styles();
      margin: 0;
    }

    &:hover::after {
      background-image: icons.generateCaretIcon(forms-variables.$clr-forms-select-caret-hover-color);
    }
  }

  .clr-error .clr-select-wrapper::after,
  .clr-success .clr-select-wrapper::after {
    right: forms-variables.$clr-forms-icon-size + forms-variables.$clr-forms-baseline;
  }

  .clr-multiselect-wrapper {
    display: flex;

    .clr-validate-icon {
      margin-left: 0;
    }
  }

  //Multiple Select
  select[multiple],
  select[size] {
    $multiSassBgVar: forms-variables.$clr-forms-select-multiple-background-color;
    $multiCssBgVar: clr-forms-select-multiple-background-color;
    $multiSassBorderVar: forms-variables.$clr-forms-select-multiple-border-color;
    $multiCssBorderVar: clr-forms-select-multiple-border-color;
    padding: 0;
    @include mixins.css-var(background, $multiCssBgVar, $multiSassBgVar, variables.$clr-use-custom-properties);
    border: variables.$clr-global-borderwidth solid;
    @include mixins.css-var(
      border-color,
      $multiCssBorderVar,
      $multiSassBorderVar,
      variables.$clr-use-custom-properties
    );
    @include mixins.css-var(
      border-radius,
      clr-global-borderradius,
      variables.$clr-global-borderradius,
      variables.$clr-use-custom-properties
    );
    height: auto;
    min-width: variables.$clr_baselineRem_5;

    &:hover,
    &:active {
      @include mixins.css-var(background, $multiCssBgVar, $multiSassBgVar, variables.$clr-use-custom-properties);
      @include mixins.css-var(
        border-color,
        $multiCssBorderVar,
        $multiSassBorderVar,
        variables.$clr-use-custom-properties
      );
    }
    option {
      padding: (forms-variables.$clr-forms-baseline * 0.5) forms-variables.$clr-forms-baseline;
      @include mixins.css-var(
        color,
        clr-forms-select-multiple-option-color,
        forms-variables.$clr-forms-select-multiple-option-color,
        variables.$clr-use-custom-properties
      );
    }
  }

  .clr-error select {
    &:not([multiple]) {
      @include mixins.css-var(
        border-bottom-color,
        clr-forms-invalid-color,
        forms-variables.$clr-forms-invalid-color,
        variables.$clr-use-custom-properties
      );
    }
    &[multiple] {
      @include mixins.css-var(
        border-color,
        clr-forms-invalid-color,
        forms-variables.$clr-forms-invalid-color,
        variables.$clr-use-custom-properties
      );
    }
  }

  .clr-success select {
    &:not([multiple]) {
      @include mixins.css-var(
        border-bottom-color,
        clr-forms-valid-color,
        forms-variables.$clr-forms-valid-color,
        variables.$clr-use-custom-properties
      );
    }
    &[multiple] {
      @include mixins.css-var(
        border-color,
        clr-forms-valid-color,
        forms-variables.$clr-forms-valid-color,
        variables.$clr-use-custom-properties
      );
    }
  }

  .clr-form-control-disabled .clr-select {
    &.disabled {
      @include forms-mixins.disabled-form-fields();

      &:hover::after {
        @include mixins.css-var(
          color,
          clr-forms-select-caret-color,
          forms-variables.$clr-forms-select-caret-color,
          variables.$clr-use-custom-properties
        );
      }
    }

    &.disabled > select,
    select:disabled {
      @include forms-mixins.disabled-form-fields();
      &:hover {
        background: none;
        @include mixins.css-var(
          border-color,
          clr-forms-border-color,
          forms-variables.$clr-forms-border-color,
          variables.$clr-use-custom-properties
        );
      }
    }
  }

  .clr-form-compact .clr-multiselect-wrapper {
    margin-top: 0;
  }
}
