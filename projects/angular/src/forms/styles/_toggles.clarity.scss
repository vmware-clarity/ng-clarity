/*
 * Copyright (c) 2016-2023 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
@use 'sass:meta';
@use '../../button/variables.toggles' as toggle-variables;
@use '../../emphasis/alert/variables.alert' as alert-variables;
@use '../../utils/mixins';
@use '../../utils/variables/variables.global';
@use 'variables.forms' as forms-variables;

@mixin clr-toggle-transition-styles() {
  transition-duration: toggle-variables.$clr-toggle-transition-time;
  transition-timing-function: toggle-variables.$clr-toggle-transition-animation;
}

@include meta.load-css('../../button/properties.toggles');

@include mixins.exports('toggles.clarity') {
  //Remove the default checkbox appearance
  %custom-checkbox {
    @include mixins.clr-appearance-normal();
  }

  .clr-toggle-wrapper {
    vertical-align: middle;
    position: relative;
    display: block;
    margin-right: variables.$clr_baselineRem_0_5;
    @include mixins.css-var(
      height,
      clr-toggle-height,
      toggle-variables.$clr-toggle-height,
      variables.$clr-use-custom-properties
    );

    label {
      display: inline-block;
      position: relative;
      cursor: pointer;
      margin-right: 0;
      @include mixins.css-var(
        margin-left,
        clr-toggle-icon-margin,
        toggle-variables.$clr-toggle-switch-base-width + toggle-variables.$clr-toggle-switch-base-left-spacing,
        variables.$clr-use-custom-properties
      );
      @include mixins.css-var(
        height,
        clr-toggle-height,
        toggle-variables.$clr-toggle-height,
        variables.$clr-use-custom-properties
      );
    }

    input[type='checkbox'] {
      @extend %custom-checkbox;

      position: absolute;
      top: variables.$clr_baselineRem_0_25;
      right: variables.$clr_baselineRem_0_25;
      @include mixins.equilateral(alert-variables.$clr-icon-dimension-sm);
      opacity: 0;
    }

    input[type='checkbox'] + label::before {
      position: absolute;
      display: inline-block;
      content: '';
      border: variables.$clr_baselineRem_2px solid;
      border-radius: variables.$clr_baselineRem_0_375;
      @include mixins.css-var(
        height,
        clr-toggle-switch-base-height,
        toggle-variables.$clr-toggle-switch-base-height,
        variables.$clr-use-custom-properties
      );
      @include mixins.css-var(
        width,
        clr-toggle-switch-base-width,
        toggle-variables.$clr-toggle-switch-base-width,
        variables.$clr-use-custom-properties
      );
      @include mixins.css-var(
        border-color,
        clr-toggle-bg-color-off,
        toggle-variables.$clr-toggle-bg-color-off,
        variables.$clr-use-custom-properties
      );
      @include mixins.css-var(
        background-color,
        clr-toggle-bg-color-off,
        toggle-variables.$clr-toggle-bg-color-off,
        variables.$clr-use-custom-properties
      );
      @include mixins.css-var(
        top,
        clr-toggle-icon-top,
        forms-variables.$clr-forms-baseline * 0.5,
        variables.$clr-use-custom-properties
      );
      right: 0;
      @include mixins.css-var(
        left,
        clr-toggle-icon-margin-negative,
        -1 * (toggle-variables.$clr-toggle-switch-base-width + toggle-variables.$clr-toggle-switch-base-left-spacing),
        variables.$clr-use-custom-properties
      );
      @include clr-toggle-transition-styles;
      transition-property: border-color, background-color;
    }

    input[type='checkbox']:focus + label::before {
      @include mixins.include-outline-style-form-fields();
    }

    input[type='checkbox']:checked + label::before {
      @include mixins.css-var(
        border-color,
        clr-toggle-bg-color-on,
        toggle-variables.$clr-toggle-bg-color-on,
        variables.$clr-use-custom-properties
      );
      @include mixins.css-var(
        background-color,
        clr-toggle-bg-color-on,
        toggle-variables.$clr-toggle-bg-color-on,
        variables.$clr-use-custom-properties
      );
      @include clr-toggle-transition-styles;
      transition-property: border-color, background-color;
    }

    //Toggle Switch
    input[type='checkbox'] + label::after {
      position: absolute;
      display: inline-block;
      content: '';
      border-width: variables.$clr_baselineRem_2px;
      border-style: solid;
      border-radius: 50%;
      right: 0;
      @include mixins.css-var(
        top,
        clr-toggle-icon-dot-top,
        variables.$clr_baselineRem_2px + 0.5 * forms-variables.$clr-forms-baseline,
        variables.$clr-use-custom-properties
      );
      @include mixins.css-var(
        height,
        clr-toggle-dot-diameter,
        toggle-variables.$clr-toggle-switch-height,
        variables.$clr-use-custom-properties
      );
      @include mixins.css-var(
        width,
        clr-toggle-dot-diameter,
        toggle-variables.$clr-toggle-switch-height,
        variables.$clr-use-custom-properties
      );
      @include mixins.css-var(
        border-color,
        clr-toggle-handle-border-color,
        toggle-variables.$clr-toggle-handle-bg-color,
        variables.$clr-use-custom-properties
      );
      @include mixins.css-var(
        background-color,
        clr-toggle-handle-bg-color,
        toggle-variables.$clr-toggle-handle-bg-color,
        variables.$clr-use-custom-properties
      );
      @include mixins.css-var(
        left,
        clr-toggle-icon-dot-place,
        -1 * (toggle-variables.$clr-toggle-switch-base-width + toggle-variables.$clr-toggle-switch-base-left-spacing -
              variables.$clr_baselineRem_2px),
        variables.$clr-use-custom-properties
      );
      @include clr-toggle-transition-styles;
      transition-property: right, left;
    }

    input[type='checkbox']:checked + label::after {
      @include mixins.css-var(
        border-color,
        clr-toggle-handle-border-color-on,
        toggle-variables.$clr-toggle-handle-bg-color,
        variables.$clr-use-custom-properties
      );
      @include mixins.css-var(
        right,
        clr-toggle-icon-dot-place,
        -1 * (toggle-variables.$clr-toggle-switch-base-width + toggle-variables.$clr-toggle-switch-base-left-spacing -
              variables.$clr_baselineRem_2px),
        variables.$clr-use-custom-properties
      );
      @include mixins.css-var(
        left,
        clr-toggle-switch-left-spacing-negative,
        -1 * (toggle-variables.$clr-toggle-switch-left-spacing),
        variables.$clr-use-custom-properties
      );
      @include clr-toggle-transition-styles;
      transition-property: right, left;
    }

    &.disabled {
      label {
        opacity: 0.4;
        cursor: not-allowed;
      }

      input[type='checkbox']:checked + label::before {
        @include mixins.css-var(
          border-color,
          clr-toggle-disabled-on-border-color,
          toggle-variables.$clr-toggle-disabled-on-border-color,
          variables.$clr-use-custom-properties
        );
        @include mixins.css-var(
          background-color,
          clr-toggle-disabled-on-border-color,
          toggle-variables.$clr-toggle-disabled-on-border-color,
          variables.$clr-use-custom-properties
        );
      }
    }

    // TODO: cleanup hard-coded sizes in here. not sure what they are keying on...
    input[type='checkbox']:disabled + label {
      cursor: not-allowed;

      &::before {
        // toggle disabled/off bg color
        @include mixins.css-var(
          background-color,
          clr-toggle-disabled-off-bg-color,
          toggle-variables.$clr-toggle-disabled-off-bg-color,
          variables.$clr-use-custom-properties
        );
        // toggle disabled/off border color (excluding the handle circle)
        @include mixins.css-var(
          border-color,
          clr-toggle-disabled-off-border-color,
          toggle-variables.$clr-toggle-disabled-off-border-color,
          variables.$clr-use-custom-properties
        );
      }

      &::after {
        // toggle handle color for disabled/off and inner part of handle disabled/on
        @include mixins.css-var(
          background-color,
          clr-toggle-disabled-off-bg-color,
          toggle-variables.$clr-toggle-disabled-off-bg-color,
          variables.$clr-use-custom-properties
        );
        border-style: solid;
        @include mixins.css-var(
          border-color,
          clr-toggle-disabled-off-handle-border-color,
          toggle-variables.$clr-toggle-disabled-off-handle-border-color,
          variables.$clr-use-custom-properties
        );
        @include mixins.css-var(
          height,
          clr-toggle-switch-base-height,
          toggle-variables.$clr-toggle-switch-base-height,
          variables.$clr-use-custom-properties
        );
        @include mixins.css-var(
          width,
          clr-toggle-switch-base-height,
          toggle-variables.$clr-toggle-switch-base-height,
          variables.$clr-use-custom-properties
        );
        @include mixins.css-var(
          top,
          clr-toggle-icon-dot-top-disabled,
          variables.$clr_baselineRem_3px,
          variables.$clr-use-custom-properties
        );
      }
    }

    input[type='checkbox']:checked:disabled + label::before {
      // toggle disabled/on border color
      @include mixins.css-var(
        border-color,
        clr-toggle-disabled-on-border-color,
        toggle-variables.$clr-toggle-disabled-on-border-color,
        variables.$clr-use-custom-properties
      );
      // toggle disabled/on bg color
      @include mixins.css-var(
        background-color,
        clr-toggle-disabled-on-bg-color,
        toggle-variables.$clr-toggle-disabled-on-bg-color,
        variables.$clr-use-custom-properties
      );
    }

    input[type='checkbox']:checked:disabled + label::after {
      // toggle disabled on handle circle border color
      @include mixins.css-var(
        border-color,
        clr-toggle-disabled-on-handle-border-color,
        toggle-variables.$clr-toggle-disabled-on-handle-border-color,
        variables.$clr-use-custom-properties
      );
      @include mixins.css-var(
        height,
        clr-toggle-dot-diameter,
        toggle-variables.$clr-toggle-switch-height,
        variables.$clr-use-custom-properties
      );
      @include mixins.css-var(
        width,
        clr-toggle-dot-diameter,
        toggle-variables.$clr-toggle-switch-height,
        variables.$clr-use-custom-properties
      );
      @include mixins.css-var(
        top,
        clr-toggle-icon-dot-top,
        variables.$clr_baselineRem_5px,
        variables.$clr-use-custom-properties
      );
      @include mixins.css-var(
        left,
        clr-toggle-switch-left-spacing-negative,
        -1 * (toggle-variables.$clr-toggle-switch-left-spacing),
        variables.$clr-use-custom-properties
      );
    }

    input[type='checkbox']:disabled + label::after {
      @include mixins.css-var(
        left,
        clr-toggle-icon-margin-negative,
        -1 * (toggle-variables.$clr-toggle-switch-base-width + toggle-variables.$clr-toggle-switch-base-left-spacing),
        variables.$clr-use-custom-properties
      );
    }

    // Allow for label to be on the right of the toggle switch.
    &.right-label {
      label {
        @include mixins.css-var(
          margin-left,
          clr-toggle-icon-margin,
          toggle-variables.$clr-toggle-switch-base-width + toggle-variables.$clr-toggle-switch-base-left-spacing,
          variables.$clr-use-custom-properties
        );
        margin-right: 0;
      }

      input[type='checkbox'] + label::before {
        right: 0;
        @include mixins.css-var(
          left,
          clr-toggle-icon-margin-negative,
          -1 * (toggle-variables.$clr-toggle-switch-base-width + toggle-variables.$clr-toggle-switch-base-left-spacing),
          variables.$clr-use-custom-properties
        );
      }

      input[type='checkbox'] + label::after {
        right: 0;
        @include mixins.css-var(
          left,
          clr-toggle-icon-dot-place,
          -1 * (toggle-variables.$clr-toggle-switch-base-width + toggle-variables.$clr-toggle-switch-base-left-spacing -
                variables.$clr_baselineRem_2px),
          variables.$clr-use-custom-properties
        );
        transition-property: left;
      }

      input[type='checkbox']:checked + label::after {
        @include mixins.css-var(
          left,
          clr-toggle-switch-left-spacing-negative,
          -1 * (toggle-variables.$clr-toggle-switch-left-spacing),
          variables.$clr-use-custom-properties
        );
        transition-property: left;
      }
    }

    .clr-control-label {
      display: block;
      font-weight: 400;
      line-height: (4 * forms-variables.$clr-forms-baseline);
    }
  }

  // These are the inline styles overrides
  .clr-control-inline .clr-toggle-wrapper .clr-control-label {
    display: inline-block;
    margin-right: (2 * forms-variables.$clr-forms-baseline);
  }
  // This sets the option to move the toggles to the right of the label
  .clr-toggle-right {
    label {
      display: inline-block;
      margin-left: 0;
      @include mixins.css-var(
        margin-right,
        clr-toggle-icon-margin,
        toggle-variables.$clr-toggle-switch-base-width + toggle-variables.$clr-toggle-switch-base-left-spacing,
        variables.$clr-use-custom-properties
      );
    }
    input[type='checkbox'] + label::before {
      left: unset;
      @include mixins.css-var(
        right,
        clr-toggle-icon-margin-negative,
        -1 * (toggle-variables.$clr-toggle-switch-base-width + toggle-variables.$clr-toggle-switch-base-left-spacing),
        variables.$clr-use-custom-properties
      );
    }
    input[type='checkbox'] + label::after {
      left: unset;
      @include mixins.css-var(
        right,
        clr-toggle-switch-left-spacing-negative,
        -1 * (toggle-variables.$clr-toggle-switch-left-spacing),
        variables.$clr-use-custom-properties
      );
      transition-property: right;
    }
    input[type='checkbox']:checked + label::after {
      left: unset;
      @include mixins.css-var(
        right,
        clr-toggle-icon-dot-place,
        -1 * (toggle-variables.$clr-toggle-switch-base-width + toggle-variables.$clr-toggle-switch-base-left-spacing -
              variables.$clr_baselineRem_2px),
        variables.$clr-use-custom-properties
      );
      transition-property: right;
    }
    input[type='checkbox']:disabled + label::after {
      left: unset;
      @include mixins.css-var(
        right,
        clr-toggle-switch-left-spacing-negative,
        -1 * (toggle-variables.$clr-toggle-switch-left-spacing + variables.$clr_baselineRem_1px),
        variables.$clr-use-custom-properties
      );
    }
    input[type='checkbox']:checked:disabled + label::after {
      left: unset;
      @include mixins.css-var(
        right,
        clr-toggle-icon-dot-place,
        -1 * (toggle-variables.$clr-toggle-switch-base-width + toggle-variables.$clr-toggle-switch-base-left-spacing -
              variables.$clr_baselineRem_2px),
        variables.$clr-use-custom-properties
      );
    }
    .clr-control-inline .clr-toggle-wrapper .clr-control-label {
      margin-right: (9 * forms-variables.$clr-forms-baseline);
    }
  }
}
