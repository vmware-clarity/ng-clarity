/*
 * Copyright (c) 2016-2025 Broadcom. All Rights Reserved.
 * The term "Broadcom" refers to Broadcom Inc. and/or its subsidiaries.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
@use 'sass:meta';
@use '../../button/variables.toggles' as toggle-variables;
@use 'variables.forms' as forms-variables;
@use '../../utils/mixins';
@use '@cds/core/tokens/tokens.scss';

@mixin clr-toggle-transition-styles() {
  transition-duration: toggle-variables.$clr-toggle-transition-time;
  transition-timing-function: toggle-variables.$clr-toggle-transition-animation;
}

@include meta.load-css('../../button/properties.toggles');

@include mixins.exports('toggles.clarity') {
  $mark-half-size: calc(#{forms-variables.$clr-forms-checkbox-mark-size} * 0.5);

  //Remove the default checkbox appearance
  %custom-checkbox {
    @include mixins.clr-appearance-normal();
  }

  .clr-toggle-wrapper {
    position: relative;
    display: flex;
    align-items: center;
    margin-right: tokens.$cds-global-space-6;
    height: toggle-variables.$clr-toggle-height;
    justify-content: start;
    gap: tokens.$cds-global-space-5;

    label {
      display: inline-block;
      position: relative;
      cursor: pointer;
      height: toggle-variables.$clr-toggle-height;
      flex: 1 1 auto;
    }

    input[type='checkbox'] {
      position: relative;
      @extend %custom-checkbox;
      height: toggle-variables.$clr-toggle-switch-base-height;
      width: toggle-variables.$clr-toggle-switch-base-width;
      flex: 0 0 auto;
      border-radius: tokens.$cds-alias-object-border-radius-200; // Style outline radius properly
      background-color: toggle-variables.$clr-toggle-bg-color-off;
      @include clr-toggle-transition-styles;
      transition-property: border-color, background-color;

      &:not(:disabled) {
        cursor: pointer;
      }

      &::before {
        position: absolute;
        display: inline-block;
        content: '';
        border-radius: tokens.$cds-alias-object-border-radius-300;
        border: tokens.$cds-alias-object-border-width-400 solid toggle-variables.$clr-toggle-handle-border-color;
        background-color: toggle-variables.$clr-toggle-handle-bg-color;
        left: 0;
        right: calc(-1 * toggle-variables.$clr-toggle-switch-base-width);

        @include mixins.equilateral(toggle-variables.$clr-toggle-dot-diameter);
        @include clr-toggle-transition-styles;
        transition-property: right, left;
      }

      //Toggle Switch
      &::after {
        position: absolute;
        content: '';
        display: none;
        right: tokens.$cds-global-space-3;
        height: calc(#{$mark-half-size} + #{tokens.$cds-global-space-1});
        width: forms-variables.$clr-forms-checkbox-mark-size;
        border-left: forms-variables.$clr-forms-checkbox-mark-border-size solid toggle-variables.$clr-toggle-bg-color-on;
        border-bottom: forms-variables.$clr-forms-checkbox-mark-border-size solid
          toggle-variables.$clr-toggle-bg-color-on;
        transform: translate(0, $mark-half-size) rotate(-45deg);
      }

      &:focus {
        @include mixins.include-outline-style-form-fields(mixins.baselinePx(3));
      }

      &:checked {
        border-color: toggle-variables.$clr-toggle-bg-color-on;
        background-color: toggle-variables.$clr-toggle-bg-color-on;
        transition-property: border-color, background-color;

        &::before {
          @include mixins.equilateral(toggle-variables.$clr-toggle-dot-diameter);
          border-width: tokens.$cds-alias-object-border-width-200;
          border-color: toggle-variables.$clr-toggle-handle-border-color-on;
          @include clr-toggle-transition-styles;
          transition-property: right, left;
          left: calc(toggle-variables.$clr-toggle-switch-base-width - toggle-variables.$clr-toggle-dot-diameter);
          right: 0;
        }

        &::after {
          display: inline-block;
        }
      }

      &:disabled {
        // toggle disabled/off bg color
        background-color: toggle-variables.$clr-toggle-disabled-off-border-color;
        // toggle disabled/off border color (excluding the handle circle)
        border-color: toggle-variables.$clr-toggle-disabled-off-border-color;

        + label {
          cursor: not-allowed;
        }

        &:not(:checked) {
          left: 0;
        }

        &::before {
          // toggle handle color for disabled/off and inner part of handle disabled/on
          background-color: toggle-variables.$clr-toggle-disabled-off-bg-color;
          border-color: toggle-variables.$clr-toggle-disabled-off-handle-border-color;
        }

        &::after {
          border-color: toggle-variables.$clr-toggle-disabled-off-border-color;
        }
      }

      &:checked:disabled {
        // toggle disabled/on border color
        border-color: toggle-variables.$clr-toggle-disabled-on-border-color;
        // toggle disabled/on bg color
        background-color: toggle-variables.$clr-toggle-disabled-on-bg-color;

        &::before {
          // toggle disabled on handle circle border color
          border-color: toggle-variables.$clr-toggle-disabled-on-handle-border-color;
        }

        &::after {
          // toggle disabled on handle circle border color
          border-color: toggle-variables.$clr-toggle-disabled-on-border-color;
        }
      }
    }

    &.disabled {
      label {
        cursor: not-allowed;
      }

      input[type='checkbox']:checked::before {
        border-color: toggle-variables.$clr-toggle-disabled-on-border-color;
        background-color: toggle-variables.$clr-toggle-disabled-on-bg-color;
      }
    }

    &.right-label {
      flex-flow: row-reverse;
    }

    .clr-control-label {
      display: block;
      @include mixins.generate-typography-token('SECONDARY-13-RG-CPT');
      padding: tokens.$cds-global-space-3 0;
      margin-top: 0;
    }
  }

  // These are the inline styles overrides
  .clr-control-inline .clr-toggle-wrapper .clr-control-label {
    display: inline-block;
    margin-right: 0;
  }

  // This sets the option to move the toggles to the right of the label
  .clr-toggle-right {
    .clr-toggle-wrapper {
      flex-flow: row-reverse;
    }
    label {
      display: inline-block;
    }
  }
}
