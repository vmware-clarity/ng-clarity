/*
 * Copyright (c) 2016-2024 Broadcom. All Rights Reserved.
 * The term "Broadcom" refers to Broadcom Inc. and/or its subsidiaries.   
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
@use 'sass:map';
@use 'sass:meta';
@use '../utils/mixins';
@use '../utils/variables/variables';
@use 'variables.modal' as modal-variables;
@include meta.load-css('properties.modal');

@include mixins.exports('modal.clarity') {
  .modal {
    position: fixed;
    top: 0;
    bottom: 0;
    right: 0;
    left: 0;
    z-index: map.get(variables.$clr-layers, modal);
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    padding: variables.$clr_baselineRem_2;

    @media screen and (max-width: map.get(variables.$clr-grid-breakpoints, sm)) {
      padding: variables.$clr_baselineRem_0_5;
    }
  }

  .side-panel {
    .modal {
      left: initial;
      padding: 0;
      height: 100%;
      max-width: 100%;

      .modal-content-wrapper {
        height: 100%;

        .modal-content {
          height: 100%;
          display: flex;
          flex-direction: column;
        }
      }

      .modal-dialog {
        border: none;
        border-radius: 0;
        height: 100%;
      }

      &.modal-full-screen {
        left: 0;
        top: 0;
        right: 0;
        bottom: 0;
        padding: 0;
      }

      .modal-body-wrapper {
        flex: 1 1;
        max-height: 100%;
      }
    }
  }

  .modal-dialog {
    position: relative;
    z-index: map.get(variables.$clr-layers, modal);
    @include mixins.css-var(
      width,
      clr-modal-md-width,
      modal-variables.$clr-modal-md-width,
      variables.$clr-use-custom-properties
    );
    @include mixins.css-var(
      border-radius,
      clr-modal-border-radius,
      modal-variables.$clr-modal-border-radius,
      variables.$clr-use-custom-properties
    );
    @include mixins.css-var(
      box-shadow,
      clr-modal-content-box-shadow,
      0 variables.$clr_baselineRem_1px variables.$clr_baselineRem_2px variables.$clr_baselineRem_2px
        modal-variables.$clr-modal-content-box-shadow-color,
      variables.$clr-use-custom-properties
    );
    @include mixins.css-var(border-style, clr-modal-content-border-style, none, variables.$clr-use-custom-properties);
    @include mixins.css-var(border-width, clr-modal-content-border-width, 0, variables.$clr-use-custom-properties);
    @include mixins.css-var(
      border-color,
      clr-modal-content-border-color,
      transparent,
      variables.$clr-use-custom-properties
    );
    @include mixins.css-var(
      background-color,
      clr-modal-bg-color,
      modal-variables.$clr-modal-bg-color,
      variables.$clr-use-custom-properties
    );
    max-width: 100%;

    &.modal-sm {
      @include mixins.css-var(
        width,
        clr-modal-sm-width,
        modal-variables.$clr-modal-sm-width,
        variables.$clr-use-custom-properties
      );
    }

    &.modal-lg {
      @include mixins.css-var(
        width,
        clr-modal-lg-width,
        modal-variables.$clr-modal-lg-width,
        variables.$clr-use-custom-properties
      );
    }

    &.modal-xl {
      @include mixins.css-var(
        width,
        clr-modal-xl-width,
        modal-variables.$clr-modal-xl-width,
        variables.$clr-use-custom-properties
      );
    }

    .modal-content {
      @include mixins.css-var(
        padding,
        clr-modal-content-padding,
        modal-variables.$clr-modal-content-padding-top modal-variables.$clr-modal-content-padding-right
          modal-variables.$clr-modal-content-padding-bottom modal-variables.$clr-modal-content-padding-left,
        variables.$clr-use-custom-properties
      );
    }
  }

  .modal-header {
    border-bottom: none;
    @include mixins.css-var(
      padding,
      clr-modal-header-padding,
      0 0 variables.$clr_baselineRem_1 0,
      variables.$clr-use-custom-properties
    );

    // TODO: This class is used only in the clr-modal template.
    // It should be merged this with `.modal-header` in a major version
    // because this would be breaking for the static modals.
    &--accessible {
      @extend .modal-header;
      display: flex;
      justify-content: space-between;
      align-items: flex-start;
    }

    .modal-title {
      @include mixins.css-var(
        color,
        clr-modal-title-color,
        modal-variables.$clr-modal-title-color,
        variables.$clr-use-custom-properties
      );
      margin: 0;
      @include mixins.css-var(
        padding,
        clr-modal-title-padding,
        0 variables.$clr_baselineRem_0_125,
        variables.$clr-use-custom-properties
      );
    }

    .modal-title:not([cds-text]) {
      @include mixins.css-var(
        font-size,
        clr-modal-title-font-size,
        modal-variables.$clr-modal-title-font-size,
        variables.$clr-use-custom-properties
      );
      @include mixins.css-var(
        font-family,
        clr-modal-title-font-family,
        modal-variables.$clr-modal-title-font-family,
        variables.$clr-use-custom-properties
      );
      @include mixins.css-var(
        font-weight,
        clr-modal-title-font-weight,
        modal-variables.$clr-modal-title-font-weight,
        variables.$clr-use-custom-properties
      );
      @include mixins.css-var(
        line-height,
        clr-modal-title-line-height,
        modal-variables.$clr-modal-title-line-height,
        variables.$clr-use-custom-properties
      );
      letter-spacing: modal-variables.$clr-modal-title-letter-spacing;
    }

    .close {
      margin-top: -1 * variables.$clr_baselineRem_1px;
      margin-right: -1 * variables.$clr_baselineRem_5px;
      font-size: variables.$clr_baselineRem_1_0833;
      line-height: variables.$clr_baselineRem_1;

      cds-icon,
      clr-icon {
        @include mixins.css-var(
          fill,
          clr-modal-close-color,
          modal-variables.$clr-modal-close-color,
          variables.$clr-use-custom-properties
        );

        // per measurement, this results in an icon that is 16x16...
        @include mixins.equilateral-var(
          clr-modal-close-icon-size,
          variables.$clr_baselineRem_1,
          variables.$clr-use-custom-properties
        );
      }
    }
  }

  .modal-title-wrapper {
    flex: 1;

    .modal-title,
    .side-panel-title {
      h3 {
        margin-top: 0;
      }
    }
  }

  .modal-body-wrapper {
    // This doesn't do much, but at least with several paragraphs in the content
    // it doesn't mess up the modal's proportions.
    max-height: 70vh;
    overflow-y: auto;
    overflow-x: hidden;
    padding: 0 variables.$clr_baselineRem_0_125;

    .modal-body,
    .side-panel-body {
      @include mixins.css-var(
        color,
        clr-modal-text-color,
        variables.$clr-p1-color,
        variables.$clr-use-custom-properties
      );
    }

    & > :first-child {
      margin-top: 0;
    }
    & > :last-child {
      margin-bottom: 0;
    }
  }

  .modal-footer,
  .side-panel-footer {
    display: flex;
    justify-content: flex-end;
    @include mixins.css-var(
      padding,
      clr-modal-footer-padding,
      variables.$clr_baselineRem_1 0 0 0,
      variables.$clr-use-custom-properties
    );
    @include mixins.css-var(
      gap,
      clr-modal-footer-gap,
      variables.$clr_baselineRem_0_5,
      variables.$clr-use-custom-properties
    );

    .btn {
      //switched right margin to left because footer is right aligned
      margin: 0;
    }
  }

  // it gets nested inside a .modal-footer and the top padding gets duplicated
  .side-panel-footer {
    padding-top: 0;
  }

  @media screen and (max-width: map.get(variables.$clr-grid-breakpoints, md)) and (orientation: landscape) {
    .modal-body-wrapper {
      max-height: 55vh;
    }
  }

  @media screen and (max-width: map.get(variables.$clr-grid-breakpoints, sm)) {
    .modal-content {
      @include mixins.css-var(
        padding,
        clr-modal-sm-content-padding,
        variables.$clr_baselineRem_0_5 0 variables.$clr_baselineRem_0_5 variables.$clr_baselineRem_1,
        variables.$clr-use-custom-properties
      );
    }

    .modal-header {
      @include mixins.css-var(
        padding,
        clr-modal-sm-header-padding,
        0 variables.$clr_baselineRem_1 variables.$clr_baselineRem_0_5 0,
        variables.$clr-use-custom-properties
      );
    }

    .modal-body-wrapper {
      max-height: 55vh;
    }

    .modal-footer {
      @include mixins.css-var(
        padding,
        clr-modal-sm-footer-padding,
        variables.$clr_baselineRem_0_5 variables.$clr_baselineRem_1 0 0,
        variables.$clr-use-custom-properties
      );
    }
  }

  .modal-backdrop {
    $clr-backdrop-opacity: 0.85;
    position: fixed;
    top: 0;
    bottom: 0;
    right: 0;
    left: 0;
    @include mixins.css-var(
      background-color,
      clr-modal-backdrop-color,
      modal-variables.$clr-modal-backdrop-color,
      variables.$clr-use-custom-properties
    );
    @include mixins.css-var(
      opacity,
      clr-modal-backdrop-opacity,
      $clr-backdrop-opacity,
      variables.$clr-use-custom-properties
    );
    z-index: map.get(variables.$clr-layers, modal-bg);
  }

  // modal-nav is only used in wizards
  .modal .modal-nav {
    display: none;
  }

  // full-screen modals
  .modal.modal-full-screen {
    padding: variables.$clr_baselineRem_1;
    height: 100%;

    .modal-dialog {
      display: flex;
      width: 100%;
      height: 100%;

      .modal-content-wrapper {
        display: flex;
        flex-grow: 1;
      }

      // This cannot be nested inside `.modal-content-wrapper` because that class is not documented for static css-only modals.
      .modal-content {
        display: flex;
        flex-direction: column;
        flex-grow: 1;
      }

      .modal-body-wrapper,
      // This is needed because the `.modal-body-wrapper` class is not documented for static css-only modals.
      .modal-body {
        // Fill space to push footer to bottom.
        flex-grow: 1;
        max-height: 100%;
      }
    }
  }
}
