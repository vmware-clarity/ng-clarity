/*
 * Copyright (c) 2016-2023 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */

@mixin generateHorizontalAxisAlignment($breakpoint: null) {
  [#{$layout}~='#{$horizontal}'] {
    &[#{$layout}*='#{$align}#{$breakpoint}:#{$top}'] {
      align-items: flex-start;
    }

    &[#{$layout}*='#{$align}#{$breakpoint}:#{$bottom}'] {
      align-items: flex-end;
    }

    &[#{$layout}*='#{$align}#{$breakpoint}:#{$left}'] {
      justify-content: flex-start;
    }

    &[#{$layout}*='#{$align}#{$breakpoint}:#{$right}'] {
      justify-content: flex-end;
    }

    &[#{$layout}*='#{$align}#{$breakpoint}:#{$vertical-center}'] {
      align-items: center;
      align-content: center;
    }

    &[#{$layout}*='#{$align}#{$breakpoint}:#{$horizontal-center}'] {
      justify-content: center;
    }

    &[#{$layout}*='#{$align}#{$breakpoint}:#{$center}'] {
      align-items: center;
      align-content: center;
      justify-content: center;
    }
  }
}

@mixin generateHorizontalOrder($breakpoint: null) {
  [#{$layout}~='#{$horizontal}'] {
    &[#{$layout}*='order#{$breakpoint}:reverse'] {
      flex-direction: row-reverse;
    }
  }
}

@mixin generateHorizontalStretch($breakpoint: null) {
  [#{$layout}~='#{$horizontal}'] {
    &[#{$layout}*='#{$align}#{$breakpoint}:#{$vertical-stretch}'] {
      align-items: stretch;
      align-content: stretch;
      flex-grow: 1;
    }

    &[#{$layout}*='#{$align}#{$breakpoint}:#{$horizontal-stretch}'] {
      justify-content: stretch;
      flex-grow: 1;

      & > * {
        flex-grow: 1;
      }
    }

    &[#{$layout}*='#{$align}#{$breakpoint}:#{$stretch}'] {
      align-items: stretch;
      align-content: stretch;
      flex-grow: 1;

      & > * {
        flex-grow: 1;
      }
    }
  }
}

@mixin generateHorizontalItemAlignment($breakpoint: null) {
  [#{$layout}~='#{$horizontal}'] {
    & > [#{$layout}*='#{$align}#{$breakpoint}:#{$center}'],
    & > [#{$layout}*='#{$align}#{$breakpoint}:#{$vertical-center}'] {
      align-self: center;
    }

    & > [#{$layout}*='#{$align}#{$breakpoint}:#{$center}'],
    & > [#{$layout}*='#{$align}#{$breakpoint}:#{$horizontal-center}'] {
      margin-left: auto !important;
      margin-right: auto !important;
    }

    & > [#{$layout}*='#{$align}#{$breakpoint}:#{$top}'] {
      align-self: flex-start;
    }

    & > [#{$layout}*='#{$align}#{$breakpoint}:#{$bottom}'] {
      align-self: flex-end;
    }

    & > [#{$layout}*='#{$align}#{$breakpoint}:#{$right}'] {
      margin-left: auto !important;
    }

    & > [#{$layout}*='#{$align}#{$breakpoint}:#{$left}'] {
      margin-right: auto !important;
    }
  }
}

@mixin generateHorizontalAlignments($breakpoint: null) {
  @include generateHorizontalAxisAlignment($breakpoint);
  @include generateHorizontalOrder($breakpoint);
  @include generateHorizontalStretch($breakpoint);
  @include generateHorizontalItemAlignment($breakpoint);
}

[#{$layout}~='#{$horizontal}'] {
  display: flex;
  flex-direction: row;
  flex-wrap: wrap;
  justify-items: flex-start;
  align-items: flex-start;
  width: 100%;
  margin: 0;
  min-height: 0;

  > [#{$layout}~='#{$horizontal}'],
  > [#{$layout}~='#{$vertical}'],
  > [cds-text] {
    width: initial !important;
  }
}

@include generateHorizontalAlignments();

@each $breakpoint, $breakpoint-value in $cds-layout-breakpoints {
  @media (min-width: $breakpoint-value) {
    @include generateHorizontalAlignments($breakpoint);
  }
}
